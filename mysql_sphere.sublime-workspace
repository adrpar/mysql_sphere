{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"MYSQL_SPHERE",
				"MYSQL_SPHERE_LINE"
			],
			[
				"type",
				"type_names"
			],
			[
				"spherepol",
				"spherepoly_add_point"
			],
			[
				"agg",
				"aggregateBuff"
			],
			[
				"sphereT",
				"sphereTypesFound"
			],
			[
				"MYSQL_",
				"MYSQL_SPHERE_TYPES"
			],
			[
				"strans_c",
				"strans_circle_inverse"
			],
			[
				"spoint_contained",
				"spoint_contained_by_circle_com"
			],
			[
				"scircle_con",
				"scircle_contained_by_circle"
			],
			[
				"MYSQL",
				"MYSQL_SPHERE_POINT"
			],
			[
				"mem",
				"memBuf1"
			],
			[
				"argT",
				"argType0"
			],
			[
				"MYS",
				"MYSQL_SPHERE_UNKNOWN"
			],
			[
				"gourpe",
				"groupedAndTree"
			],
			[
				"grout",
				"groupedAndTree"
			],
			[
				"previ",
				"previousNode"
			],
			[
				"found",
				"foundAnd"
			],
			[
				"prev",
				"previousNode"
			],
			[
				"array_ke",
				"array_key_exists"
			],
			[
				"sampC",
				"sampClientTracker"
			],
			[
				"scr",
				"scriptName"
			],
			[
				"execu",
				"executionDuration"
			],
			[
				"Uws_Model",
				"Uws_Model_Resource_JobSummaryType"
			],
			[
				"Uws",
				"Uws_Model_Resource_JobSummaryType"
			],
			[
				"esca",
				"escapedString"
			],
			[
				"combin",
				"combinedQuery"
			],
			[
				"comb",
				"combinedQuery"
			],
			[
				"str_re",
				"str_replace"
			],
			[
				"_",
				"_parseSqlAll_parseResourceName"
			],
			[
				"escapedMu",
				"escapedMultiLineParseTrees"
			],
			[
				"setDest",
				"setDestructTimeImpl"
			],
			[
				"request",
				"requestParams"
			],
			[
				"res",
				"results"
			],
			[
				"param_inf",
				"param_info_element"
			],
			[
				"cond",
				"cond_push_fields2"
			],
			[
				"NULL",
				"NULL"
			],
			[
				"clo",
				"closeParPos"
			],
			[
				"publica",
				"publication_role_id"
			],
			[
				"_daiq",
				"_daiquiri_cm_plan"
			],
			[
				"actualQ",
				"actualQuery"
			],
			[
				"strp",
				"strpos"
			],
			[
				"multiLin",
				"multiLineUsedDBs"
			],
			[
				"_che",
				"_checkTableDBACL"
			],
			[
				"mult",
				"multiLineUsedDBs"
			],
			[
				"multi",
				"multilineUsedDBs"
			],
			[
				"parseSql",
				"parseSqlAll_getColsMysqlii"
			],
			[
				"_get",
				"_getDownloadStatus"
			],
			[
				"download",
				"downloadPoll"
			],
			[
				"down",
				"downloadPoll"
			],
			[
				"dump",
				"dump	phpZendDump"
			],
			[
				"expla",
				"explainSQL"
			],
			[
				"planT",
				"planTypes"
			],
			[
				"box",
				"boxConv	double"
			],
			[
				"HKE",
				"HKEY_ERR_OK	macro"
			],
			[
				"HKEY_",
				"HKEY_ERR_OK	macro"
			],
			[
				"dimI",
				"dimIdx2	int32_t"
			],
			[
				"getHi",
				"getHilbertKey(const int32_t m, const double boxSize, const int32_t dim, const double *point)	uint64_t"
			],
			[
				"getH",
				"getHilbertKey(const int32_t m, const double boxSize, const int32_t dim, const double *point)	uint64_t"
			],
			[
				"OPT_VO",
				"OPT_VOTABLE_BINARY2	macro"
			],
			[
				"OPT_VOT",
				"OPT_VOTABLE_BINARY2	macro"
			],
			[
				"OPT_VOTABL",
				"OPT_VOTABLE_TABLEDATA	macro"
			],
			[
				"INT_MAX",
				"INT_MAX32	macro"
			],
			[
				"lenB",
				"lenBase64Overflow	int"
			],
			[
				"swap",
				"swapByteOrder16(unsigned short *us)	void"
			],
			[
				"lenBu",
				"lenBuffer	int"
			],
			[
				"vo",
				"voTableBinCastFieldToBinary(char *buffer, int lenBuff, char *value, int len, MYSQL_FIELD *field)	int"
			],
			[
				"buff",
				"buffer	char *"
			],
			[
				"MYSQL_TYPE_DATE",
				"MYSQL_TYPE_DATETIME	enum enum_field_types"
			],
			[
				"DYN",
				"DYNAMIC_STRING	typedef"
			],
			[
				"MYSQL_TYPE_TIME",
				"MYSQL_TYPE_TIMESTAMP	enum enum_field_types"
			],
			[
				"getVo",
				"getVOTableType(char *typeStr, int len)	const char *"
			],
			[
				"http_send_con",
				"http_send_content_type"
			],
			[
				"http_post",
				"http_post_fields"
			],
			[
				"format",
				"format"
			],
			[
				"quota",
				"quotaStr"
			],
			[
				"resultTable",
				"resultTableName"
			],
			[
				"tab",
				"tableName"
			],
			[
				"QUE",
				"QUEUE_PENDING	enum_queue_status"
			],
			[
				"paqu",
				"paqu_validateSQL"
			],
			[
				"status",
				"statusIndex"
			],
			[
				"Ex",
				"Exception"
			],
			[
				"queue",
				"queueGroup"
			],
			[
				"drop",
				"dropdown"
			],
			[
				"max",
				"maxVal"
			],
			[
				"button",
				"buttons-radio"
			],
			[
				"Zend_Form_Elemen",
				"Zend_Form_Element_Button  (class)"
			],
			[
				"clean",
				"cleanMultiline"
			],
			[
				"clea",
				"cleanMultiline"
			],
			[
				"user",
				"userDBAdapter"
			],
			[
				"sql",
				"sqloptions"
			],
			[
				"or",
				"order"
			],
			[
				"fetch",
				"fetchQueues"
			],
			[
				"Query_Mod",
				"Query_Model_DbTable_JobsPaquQQueue"
			],
			[
				"array_key",
				"array_key_exists"
			]
		]
	},
	"buffers":
	[
		{
			"file": "test/test/poly.sql",
			"settings":
			{
				"buffer_size": 31416,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test/expected/poly.sql.out",
			"settings":
			{
				"buffer_size": 26198,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 118 files for \"SELECT sstr(scircle( '< (1h 2m 30s , +1d 2m 30s), 90d >'));\"\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/test/circle.sql:\n   11  SELECT sstr(scircle( '< (1h 2m 30s , +1d 2m 30s), 0.1 >'));\n   12  \n   13: SELECT sstr(scircle( '< (1h 2m 30s , +1d 2m 30s), 90d >'));\n   14  \n   15  SET sphere_outmode=\"DEG\";\n   ..\n   21  SELECT sstr(scircle( '< (1h 2m 30s , +1d 2m 30s), 0.1 >'));\n   22  \n   23: SELECT sstr(scircle( '< (1h 2m 30s , +1d 2m 30s), 90d >'));\n   24  \n   25  SET sphere_outmode=\"DMS\";\n   ..\n   31  SELECT sstr(scircle( '< (1h 2m 30s , +1d 2m 30s), 0.1 >'));\n   32  \n   33: SELECT sstr(scircle( '< (1h 2m 30s , +1d 2m 30s), 90d >'));\n   34  \n   35  SET sphere_outmode=\"HMS\";\n   ..\n   41  SELECT sstr(scircle( '< (1h 2m 30s , +1d 2m 30s), 0.1 >'));\n   42  \n   43: SELECT sstr(scircle( '< (1h 2m 30s , +1d 2m 30s), 90d >'));\n   44  \n   45  SET sphere_outmode=\"DMS\";\n\n4 matches in 1 file\n\n\nSearching 118 files for \"radius must be not greater than 90 degrees\"\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/circle.cc:\n   78  		free( c );\n   79  		c = NULL;\n   80: 		fprintf (stderr, \"spherecircle_in: radius must be not greater than 90 degrees\\n\" );\n   81  	  } else if ( FPeq(c->radius,PIH) ){\n   82  		// set \"exact\" 90 degrees\n   ..\n  239  	SCircle * c  ;\n  240  	if ( FPgt(rad,PIH) || FPlt(rad,0.0) ){\n  241: 		fprintf ( stderr , \"radius must be not greater than 90 degrees or less than 0\\n\" );\n  242  		return NULL;\n  243  	}\n\n2 matches in 1 file\n\n\nSearching 118 files for \"fprintf (stderr\"\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/circle.cc:\n   78  		free( c );\n   79  		c = NULL;\n   80: 		fprintf (stderr, \"spherecircle_in: radius must be not greater than 90 degrees\\n\" );\n   81  		return NULL;\n   82  	  } else if ( FPeq(c->radius,PIH) ){\n   ..\n   89  	  free( c );\n   90  	  c = NULL;\n   91: 	  fprintf (stderr, \"spherecircle_in: parse error\\n\" );\n   92  	}\n   93  	return ( c );\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/path.cc:\n   73  		}\n   74  		if ( nelem < 2 ){\n   75: 			fprintf (stderr , \"spherepath_from_array: more than one point needed\" );\n   76  			return NULL;\n   77  		}\n   ..\n   85  				scheck = spoint_dist ( &arr[i-1], &arr[i] );\n   86  				if (FPeq(scheck, PI)) {\n   87: 					fprintf (stderr , \"spherepath_from_array: a path segment length must be not equal 180 degrees.\" );\n   88  					return NULL;\n   89  				}\n   ..\n  420  	} else {\n  421  		reset_buffer();\n  422: 		fprintf (stderr , \"spherepath_in: more than one point needed\" );\n  423  		return NULL;\n  424  	}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sparse.cc:\n  756    if (yydebug)								  \\\n  757      {									  \\\n  758:       YYFPRINTF (stderr, \"%s \", Title);					  \\\n  759        yy_symbol_print (stderr,						  \\\n  760  		  Type, Value); \\\n  761:       YYFPRINTF (stderr, \"\\n\");						  \\\n  762      }									  \\\n  763  } while (YYID (0))\n  ...\n  838  #endif\n  839  {\n  840:   YYFPRINTF (stderr, \"Stack now\");\n  841    for (; bottom <= top; ++bottom)\n  842:     YYFPRINTF (stderr, \" %d\", *bottom);\n  843:   YYFPRINTF (stderr, \"\\n\");\n  844  }\n  845  \n  ...\n  869    int yyi;\n  870    unsigned long int yylno = yyrline[yyrule];\n  871:   YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",\n  872  	     yyrule - 1, yylno);\n  873    /* The symbols being reduced.  */\n  874    for (yyi = 0; yyi < yynrhs; yyi++)\n  875      {\n  876:       fprintf (stderr, \"   $%d = \", yyi + 1);\n  877        yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],\n  878  		       &(yyvsp[(yyi + 1) - (yynrhs)])\n  879  		       		       );\n  880:       fprintf (stderr, \"\\n\");\n  881      }\n  882  }\n\n13 matches across 3 files\n\n\nSearching 118 files for \"fprintf (stderr, \"\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/circle.cc:\n   78  		free( c );\n   79  		c = NULL;\n   80: 		fprintf (stderr, \"spherecircle_in: radius must be not greater than 90 degrees\\n\" );\n   81  		return NULL;\n   82  	  } else if ( FPeq(c->radius,PIH) ){\n   ..\n   89  	  free( c );\n   90  	  c = NULL;\n   91: 	  fprintf (stderr, \"spherecircle_in: parse error\\n\" );\n   92  	}\n   93  	return ( c );\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sparse.cc:\n  756    if (yydebug)								  \\\n  757      {									  \\\n  758:       YYFPRINTF (stderr, \"%s \", Title);					  \\\n  759        yy_symbol_print (stderr,						  \\\n  760  		  Type, Value); \\\n  761:       YYFPRINTF (stderr, \"\\n\");						  \\\n  762      }									  \\\n  763  } while (YYID (0))\n  ...\n  838  #endif\n  839  {\n  840:   YYFPRINTF (stderr, \"Stack now\");\n  841    for (; bottom <= top; ++bottom)\n  842:     YYFPRINTF (stderr, \" %d\", *bottom);\n  843:   YYFPRINTF (stderr, \"\\n\");\n  844  }\n  845  \n  ...\n  869    int yyi;\n  870    unsigned long int yylno = yyrline[yyrule];\n  871:   YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",\n  872  	     yyrule - 1, yylno);\n  873    /* The symbols being reduced.  */\n  874    for (yyi = 0; yyi < yynrhs; yyi++)\n  875      {\n  876:       fprintf (stderr, \"   $%d = \", yyi + 1);\n  877        yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],\n  878  		       &(yyvsp[(yyi + 1) - (yynrhs)])\n  879  		       		       );\n  880:       fprintf (stderr, \"\\n\");\n  881      }\n  882  }\n\n10 matches across 2 files\n\n\nSearching 118 files for \"fprintf (stderr, \"\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/circle.cc:\n   78  		free( c );\n   79  		c = NULL;\n   80: 		fprintf (stderr, \"spherecircle_in: radius must be not greater than 90 degrees\\n\" );\n   81  		return NULL;\n   82  	  } else if ( FPeq(c->radius,PIH) ){\n   ..\n   89  	  free( c );\n   90  	  c = NULL;\n   91: 	  fprintf (stderr, \"spherecircle_in: parse error\\n\" );\n   92  	}\n   93  	return ( c );\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sparse.cc:\n  756    if (yydebug)								  \\\n  757      {									  \\\n  758:       YYFPRINTF (stderr, \"%s \", Title);					  \\\n  759        yy_symbol_print (stderr,						  \\\n  760  		  Type, Value); \\\n  761:       YYFPRINTF (stderr, \"\\n\");						  \\\n  762      }									  \\\n  763  } while (YYID (0))\n  ...\n  838  #endif\n  839  {\n  840:   YYFPRINTF (stderr, \"Stack now\");\n  841    for (; bottom <= top; ++bottom)\n  842:     YYFPRINTF (stderr, \" %d\", *bottom);\n  843:   YYFPRINTF (stderr, \"\\n\");\n  844  }\n  845  \n  ...\n  869    int yyi;\n  870    unsigned long int yylno = yyrline[yyrule];\n  871:   YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",\n  872  	     yyrule - 1, yylno);\n  873    /* The symbols being reduced.  */\n  874    for (yyi = 0; yyi < yynrhs; yyi++)\n  875      {\n  876:       fprintf (stderr, \"   $%d = \", yyi + 1);\n  877        yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],\n  878  		       &(yyvsp[(yyi + 1) - (yynrhs)])\n  879  		       		       );\n  880:       fprintf (stderr, \"\\n\");\n  881      }\n  882  }\n\n10 matches across 2 files\n\n\nSearching 118 files for \"fprintf(stderr, \"\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/polygon.cc:\n  490  			}\n  491  			if ( cntr > 10000 ) {\n  492: 				fprintf(stderr, \"WARNING: Bug found in spoly_contains_point\");\n  493: 				fprintf(stderr, \"ERROR: Please report it to mysql_sphere team!\");\n  494  				return false;\n  495  			}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/serialiser.cc:\n   77  	char * result = (char*) malloc(polytype_len);\n   78  	if(result == NULL) {\n   79: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n   80  		return NULL;\n   81  	}\n   ..\n   90  \n   91  		if(base64Result == NULL) {\n   92: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n   93  			return NULL;\n   94  		}\n   95  \n   96  		if(base64_encode(result, polytype_len, base64Result) != 0) {\n   97: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\");\n   98  			return NULL;\n   99  		}\n  ...\n  120  	char * result = (char*) malloc(pathtype_len);\n  121  	if(result == NULL) {\n  122: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  123  		return NULL;\n  124  	}\n  ...\n  133  \n  134  		if(base64Result == NULL) {\n  135: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  136  			return NULL;\n  137  		}\n  138  \n  139  		if(base64_encode(result, pathtype_len, base64Result) != 0) {\n  140: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\");\n  141  			return NULL;\n  142  		}\n  ...\n  189  \n  190  		if(decodedString == NULL) {\n  191: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  192  			return objType;\n  193  		}\n  194  \n  195  		if(base64_decode(input, inputLen, decodedString, NULL) <= 0) {\n  196: 			fprintf(stderr, \"Error MySQL Sphere: Could not decode the MySQL object provided!\\n\");\n  197  			free(decodedString);\n  198  			return objType;\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/serialiser_helper.h:\n    7  	char * result = (char*) malloc(SPHERETYPE_LEN); \\\n    8  	if(result == NULL) { \\\n    9: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\"); \\\n   10  		return NULL; \\\n   11  	} \\\n   ..\n   20   \\\n   21  		if(base64Result == NULL) { \\\n   22: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\"); \\\n   23  			return NULL; \\\n   24  		} \\\n   25   \\\n   26  		if(base64_encode(result, SPHERETYPE_LEN, base64Result) != 0) { \\\n   27: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\"); \\\n   28  			return NULL; \\\n   29  		} \\\n\n13 matches across 3 files\n\n\nSearching 118 files for \"fprintf\"\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/box.cc:\n  632  		reset_buffer();\n  633  		free( box );\n  634: 		fprintf ( stderr , \"spherebox_in: wrong data type\" );\n  635  		return NULL;\n  636  	}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/circle.cc:\n   78  		free( c );\n   79  		c = NULL;\n   80: 		fprintf (stderr, \"spherecircle_in: radius must be not greater than 90 degrees\\n\" );\n   81  		return NULL;\n   82  	  } else if ( FPeq(c->radius,PIH) ){\n   ..\n   89  	  free( c );\n   90  	  c = NULL;\n   91: 	  fprintf (stderr, \"spherecircle_in: parse error\\n\" );\n   92  	}\n   93  	return ( c );\n   ..\n  240  	SCircle * c  ;\n  241  	if ( FPgt(rad,PIH) || FPlt(rad,0.0) ){\n  242: 		fprintf ( stderr , \"radius must be not greater than 90 degrees or less than 0\\n\" );\n  243  		return NULL;\n  244  	}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/ellipse.cc:\n  110  		free( e );\n  111  		e = NULL;\n  112: 		fprintf ( stderr , \"sphereellipse_in: radius must be less than 90 degrees\" );\n  113  	} else {\n  114  		sellipse_check ( e );\n  ...\n  397  			} while ( cntr < maxcntr && ( ( sp[2].lng - sp[0].lng ) > FLT_EPSILON ) );\n  398  			if ( cntr >= maxcntr ){\n  399: 				fprintf ( stderr, \"Bug found in pg_sphere function 'sellipse_ellipse_pos' ! \\n Please report it to pg_sphere team.\");\n  400  			}\n  401  \n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/euler.cc:\n   77  		free( se );\n   78  		se = NULL;\n   79: 		fprintf ( stderr , \"spheretrans_in: parse error\" );\n   80  		return NULL;\n   81  	}\n   ..\n  114  		if ( t == 0 ) {\n  115  			free ( se );\n  116: 			fprintf ( stderr, \"invalid axis format\" );\n  117  			return NULL;\n  118  		}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/line.cc:\n  573  		free( sl );\n  574  		sl = NULL;\n  575: 		fprintf ( stderr , \"sphereline_in: parse error\" );\n  576  	}\n  577  	reset_buffer();\n  ...\n  600  		free( sl );\n  601  		sl = NULL;\n  602: 		fprintf ( stderr , \"sphereline_from_points: length of line must be not equal 180 degrees\" );\n  603  	}\n  604  \n  ...\n  610  	if ( FPlt( l, 0.0 ) ) {\n  611  		free ( sl );\n  612: 		fprintf ( stderr , \"sphereline_from_trans: length of line must be >= 0\" );\n  613  		return NULL;\n  614  	} else {\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/path.cc:\n   48  \n   49  	if ( nelem < 2 ) {\n   50: 		fprintf ( stderr , \"spherepath_from_array: more than one point needed\" );\n   51  		return NULL;\n   52  	} else {\n   ..\n   73  		}\n   74  		if ( nelem < 2 ){\n   75: 			fprintf (stderr , \"spherepath_from_array: more than one point needed\" );\n   76  			return NULL;\n   77  		}\n   ..\n   85  				scheck = spoint_dist ( &arr[i-1], &arr[i] );\n   86  				if (FPeq(scheck, PI)) {\n   87: 					fprintf (stderr , \"spherepath_from_array: a path segment length must be not equal 180 degrees.\" );\n   88  					return NULL;\n   89  				}\n   ..\n  420  	} else {\n  421  		reset_buffer();\n  422: 		fprintf (stderr , \"spherepath_in: more than one point needed\" );\n  423  		return NULL;\n  424  	}\n  ...\n  660  	// Skip if distance is equal 180deg\n  661  	if ( FPeq ( spoint_dist ( p, &path->p[ path->npts - 1 ]), PI ) ) {\n  662: 		fprintf ( stderr, \"NOTICE: spath(spoint): Skip point, distance of previous point is 180deg\" );\n  663  	}\n  664  \n  ...\n  679  \n  680  	if ( path->npts < 2 ) {\n  681: 		fprintf ( stderr, \"NOTICE: spath(spoint): At least 2 points required\" );\n  682  		free ( path );\n  683  		return NULL;\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/polygon.cc:\n  132  \n  133  	if ( nelem < 3 ){\n  134: 		fprintf ( stderr , \"spherepoly_from_array: more than two points needed\" );\n  135  		return NULL;\n  136  	} else {\n  ...\n  160  		}\n  161  		if ( nelem < 3 ){\n  162: 			fprintf ( stderr , \"spherepoly_from_array: more than two points needed\" );\n  163  			return NULL;\n  164  		}\n  ...\n  175  			}\n  176  			if ( FPeq( scheck, PI ) ) {\n  177: 				fprintf ( stderr , \"spherepoly_from_array: a polygon segment length must be not equal 180 degrees.\" );\n  178  				return NULL;\n  179  			}\n  ...\n  184  \n  185  	if ( ! spherepoly_check ( poly ) ){\n  186: 		fprintf ( stderr , \"spherepoly_from_array: a line segment overlaps or polygon too large\" );\n  187  		free ( poly ) ;\n  188  		return NULL;\n  ...\n  490  			}\n  491  			if ( cntr > 10000 ) {\n  492: 				fprintf(stderr, \"WARNING: Bug found in spoly_contains_point\");\n  493: 				fprintf(stderr, \"ERROR: Please report it to mysql_sphere team!\");\n  494  				return false;\n  495  			}\n  ...\n  616  	} else {\n  617  		reset_buffer();\n  618: 		fprintf ( stderr, \"spherepoly_in: more than two points needed\" );\n  619  		return NULL;\n  620  	}\n  ...\n  894  	// Skip if distance is equal 180deg\n  895  	if ( FPeq ( spoint_dist ( p, &poly->p[ poly->npts - 1 ]) , PI ) ) {\n  896: 		fprintf ( stderr, \"NOTICE: spoly(spoint): Skip point, distance of previous point is 180deg\" );\n  897  	}\n  898  \n  ...\n  915  \n  916  	if ( poly->npts < 3 ) {\n  917: 		fprintf ( stderr, \"NOTICE: spoly(spoint): At least 3 points required\" );\n  918  		return NULL;\n  919  	}\n  920  	// Skip if distance is equal 180deg\n  921  	if ( FPeq ( spoint_dist ( &poly->p[0], &poly->p[ poly->npts - 1 ]), PI ) ) {\n  922: 		fprintf ( stderr, \"NOTICE: spoly(spoint): Cannot close polygon. Distance between first and last point is 180deg\" );\n  923  		return NULL;\n  924  	}\n  925  \n  926  	if ( !spherepoly_check ( poly ) ) {\n  927: 		fprintf ( stderr, \"NOTICE: spoly(spoint): a line segment overlaps or polygon too large\" );\n  928  		return NULL;\n  929  	}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/serialiser.cc:\n   77  	char * result = (char*) malloc(polytype_len);\n   78  	if(result == NULL) {\n   79: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n   80  		return NULL;\n   81  	}\n   ..\n   90  \n   91  		if(base64Result == NULL) {\n   92: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n   93  			return NULL;\n   94  		}\n   95  \n   96  		if(base64_encode(result, polytype_len, base64Result) != 0) {\n   97: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\");\n   98  			return NULL;\n   99  		}\n  ...\n  120  	char * result = (char*) malloc(pathtype_len);\n  121  	if(result == NULL) {\n  122: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  123  		return NULL;\n  124  	}\n  ...\n  133  \n  134  		if(base64Result == NULL) {\n  135: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  136  			return NULL;\n  137  		}\n  138  \n  139  		if(base64_encode(result, pathtype_len, base64Result) != 0) {\n  140: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\");\n  141  			return NULL;\n  142  		}\n  ...\n  189  \n  190  		if(decodedString == NULL) {\n  191: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  192  			return objType;\n  193  		}\n  194  \n  195  		if(base64_decode(input, inputLen, decodedString, NULL) <= 0) {\n  196: 			fprintf(stderr, \"Error MySQL Sphere: Could not decode the MySQL object provided!\\n\");\n  197  			free(decodedString);\n  198  			return objType;\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/serialiser_helper.h:\n    7  	char * result = (char*) malloc(SPHERETYPE_LEN); \\\n    8  	if(result == NULL) { \\\n    9: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\"); \\\n   10  		return NULL; \\\n   11  	} \\\n   ..\n   20   \\\n   21  		if(base64Result == NULL) { \\\n   22: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\"); \\\n   23  			return NULL; \\\n   24  		} \\\n   25   \\\n   26  		if(base64_encode(result, SPHERETYPE_LEN, base64Result) != 0) { \\\n   27: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\"); \\\n   28  			return NULL; \\\n   29  		} \\\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sparse.cc:\n  721  # if YYLTYPE_IS_TRIVIAL\n  722  #  define YY_LOCATION_PRINT(File, Loc)			\\\n  723:      fprintf (File, \"%d.%d-%d.%d\",			\\\n  724  	      (Loc).first_line, (Loc).first_column,	\\\n  725  	      (Loc).last_line,  (Loc).last_column)\n  ...\n  741  #if YYDEBUG\n  742  \n  743: # ifndef YYFPRINTF\n  744  #  include <stdio.h> /* INFRINGES ON USER NAME SPACE */\n  745: #  define YYFPRINTF fprintf\n  746  # endif\n  747  \n  ...\n  749  do {						\\\n  750    if (yydebug)					\\\n  751:     YYFPRINTF Args;				\\\n  752  } while (YYID (0))\n  753  \n  ...\n  756    if (yydebug)								  \\\n  757      {									  \\\n  758:       YYFPRINTF (stderr, \"%s \", Title);					  \\\n  759        yy_symbol_print (stderr,						  \\\n  760  		  Type, Value); \\\n  761:       YYFPRINTF (stderr, \"\\n\");						  \\\n  762      }									  \\\n  763  } while (YYID (0))\n  ...\n  814  {\n  815    if (yytype < YYNTOKENS)\n  816:     YYFPRINTF (yyoutput, \"token %s (\", yytname[yytype]);\n  817    else\n  818:     YYFPRINTF (yyoutput, \"nterm %s (\", yytname[yytype]);\n  819  \n  820    yy_symbol_value_print (yyoutput, yytype, yyvaluep);\n  821:   YYFPRINTF (yyoutput, \")\");\n  822  }\n  823  \n  ...\n  838  #endif\n  839  {\n  840:   YYFPRINTF (stderr, \"Stack now\");\n  841    for (; bottom <= top; ++bottom)\n  842:     YYFPRINTF (stderr, \" %d\", *bottom);\n  843:   YYFPRINTF (stderr, \"\\n\");\n  844  }\n  845  \n  ...\n  869    int yyi;\n  870    unsigned long int yylno = yyrline[yyrule];\n  871:   YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",\n  872  	     yyrule - 1, yylno);\n  873    /* The symbols being reduced.  */\n  874    for (yyi = 0; yyi < yynrhs; yyi++)\n  875      {\n  876:       fprintf (stderr, \"   $%d = \", yyi + 1);\n  877        yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],\n  878  		       &(yyvsp[(yyi + 1) - (yynrhs)])\n  879  		       		       );\n  880:       fprintf (stderr, \"\\n\");\n  881      }\n  882  }\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sscan.cc:\n 1663  static void yy_fatal_error (yyconst char* msg )\n 1664  {\n 1665:     	(void) fprintf( stderr, \"%s\\n\", msg );\n 1666  	exit( YY_EXIT_FAILURE );\n 1667  }\n\n56 matches across 11 files\n\n\nSearching 118 files for \"fprintf\"\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/box.cc:\n  632  		reset_buffer();\n  633  		free( box );\n  634: 		fprintf ( stderr , \"spherebox_in: wrong data type\" );\n  635  		return NULL;\n  636  	}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/circle.cc:\n   78  		free( c );\n   79  		c = NULL;\n   80: 		fprintf (stderr, \"spherecircle_in: radius must be not greater than 90 degrees\\n\" );\n   81  		return NULL;\n   82  	  } else if ( FPeq(c->radius,PIH) ){\n   ..\n   89  	  free( c );\n   90  	  c = NULL;\n   91: 	  fprintf (stderr, \"spherecircle_in: parse error\\n\" );\n   92  	}\n   93  	return ( c );\n   ..\n  240  	SCircle * c  ;\n  241  	if ( FPgt(rad,PIH) || FPlt(rad,0.0) ){\n  242: 		fprintf ( stderr , \"radius must be not greater than 90 degrees or less than 0\\n\" );\n  243  		return NULL;\n  244  	}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/ellipse.cc:\n  110  		free( e );\n  111  		e = NULL;\n  112: 		fprintf ( stderr , \"sphereellipse_in: radius must be less than 90 degrees\" );\n  113  	} else {\n  114  		sellipse_check ( e );\n  ...\n  397  			} while ( cntr < maxcntr && ( ( sp[2].lng - sp[0].lng ) > FLT_EPSILON ) );\n  398  			if ( cntr >= maxcntr ){\n  399: 				fprintf ( stderr, \"Bug found in pg_sphere function 'sellipse_ellipse_pos' ! \\n Please report it to pg_sphere team.\");\n  400  			}\n  401  \n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/euler.cc:\n   77  		free( se );\n   78  		se = NULL;\n   79: 		fprintf ( stderr , \"spheretrans_in: parse error\" );\n   80  		return NULL;\n   81  	}\n   ..\n  114  		if ( t == 0 ) {\n  115  			free ( se );\n  116: 			fprintf ( stderr, \"invalid axis format\" );\n  117  			return NULL;\n  118  		}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/line.cc:\n  573  		free( sl );\n  574  		sl = NULL;\n  575: 		fprintf ( stderr , \"sphereline_in: parse error\" );\n  576  	}\n  577  	reset_buffer();\n  ...\n  600  		free( sl );\n  601  		sl = NULL;\n  602: 		fprintf ( stderr , \"sphereline_from_points: length of line must be not equal 180 degrees\" );\n  603  	}\n  604  \n  ...\n  610  	if ( FPlt( l, 0.0 ) ) {\n  611  		free ( sl );\n  612: 		fprintf ( stderr , \"sphereline_from_trans: length of line must be >= 0\" );\n  613  		return NULL;\n  614  	} else {\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/path.cc:\n   48  \n   49  	if ( nelem < 2 ) {\n   50: 		fprintf ( stderr , \"spherepath_from_array: more than one point needed\" );\n   51  		return NULL;\n   52  	} else {\n   ..\n   73  		}\n   74  		if ( nelem < 2 ){\n   75: 			fprintf (stderr , \"spherepath_from_array: more than one point needed\" );\n   76  			return NULL;\n   77  		}\n   ..\n   85  				scheck = spoint_dist ( &arr[i-1], &arr[i] );\n   86  				if (FPeq(scheck, PI)) {\n   87: 					fprintf (stderr , \"spherepath_from_array: a path segment length must be not equal 180 degrees.\" );\n   88  					return NULL;\n   89  				}\n   ..\n  420  	} else {\n  421  		reset_buffer();\n  422: 		fprintf (stderr , \"spherepath_in: more than one point needed\" );\n  423  		return NULL;\n  424  	}\n  ...\n  660  	// Skip if distance is equal 180deg\n  661  	if ( FPeq ( spoint_dist ( p, &path->p[ path->npts - 1 ]), PI ) ) {\n  662: 		fprintf ( stderr, \"NOTICE: spath(spoint): Skip point, distance of previous point is 180deg\" );\n  663  	}\n  664  \n  ...\n  679  \n  680  	if ( path->npts < 2 ) {\n  681: 		fprintf ( stderr, \"NOTICE: spath(spoint): At least 2 points required\" );\n  682  		free ( path );\n  683  		return NULL;\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/polygon.cc:\n  132  \n  133  	if ( nelem < 3 ){\n  134: 		fprintf ( stderr , \"spherepoly_from_array: more than two points needed\" );\n  135  		return NULL;\n  136  	} else {\n  ...\n  160  		}\n  161  		if ( nelem < 3 ){\n  162: 			fprintf ( stderr , \"spherepoly_from_array: more than two points needed\" );\n  163  			return NULL;\n  164  		}\n  ...\n  175  			}\n  176  			if ( FPeq( scheck, PI ) ) {\n  177: 				fprintf ( stderr , \"spherepoly_from_array: a polygon segment length must be not equal 180 degrees.\" );\n  178  				return NULL;\n  179  			}\n  ...\n  184  \n  185  	if ( ! spherepoly_check ( poly ) ){\n  186: 		fprintf ( stderr , \"spherepoly_from_array: a line segment overlaps or polygon too large\" );\n  187  		free ( poly ) ;\n  188  		return NULL;\n  ...\n  490  			}\n  491  			if ( cntr > 10000 ) {\n  492: 				fprintf(stderr, \"WARNING: Bug found in spoly_contains_point\");\n  493: 				fprintf(stderr, \"ERROR: Please report it to mysql_sphere team!\");\n  494  				return false;\n  495  			}\n  ...\n  616  	} else {\n  617  		reset_buffer();\n  618: 		fprintf ( stderr, \"spherepoly_in: more than two points needed\" );\n  619  		return NULL;\n  620  	}\n  ...\n  894  	// Skip if distance is equal 180deg\n  895  	if ( FPeq ( spoint_dist ( p, &poly->p[ poly->npts - 1 ]) , PI ) ) {\n  896: 		fprintf ( stderr, \"NOTICE: spoly(spoint): Skip point, distance of previous point is 180deg\" );\n  897  	}\n  898  \n  ...\n  915  \n  916  	if ( poly->npts < 3 ) {\n  917: 		fprintf ( stderr, \"NOTICE: spoly(spoint): At least 3 points required\" );\n  918  		return NULL;\n  919  	}\n  920  	// Skip if distance is equal 180deg\n  921  	if ( FPeq ( spoint_dist ( &poly->p[0], &poly->p[ poly->npts - 1 ]), PI ) ) {\n  922: 		fprintf ( stderr, \"NOTICE: spoly(spoint): Cannot close polygon. Distance between first and last point is 180deg\" );\n  923  		return NULL;\n  924  	}\n  925  \n  926  	if ( !spherepoly_check ( poly ) ) {\n  927: 		fprintf ( stderr, \"NOTICE: spoly(spoint): a line segment overlaps or polygon too large\" );\n  928  		return NULL;\n  929  	}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/serialiser.cc:\n   77  	char * result = (char*) malloc(polytype_len);\n   78  	if(result == NULL) {\n   79: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n   80  		return NULL;\n   81  	}\n   ..\n   90  \n   91  		if(base64Result == NULL) {\n   92: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n   93  			return NULL;\n   94  		}\n   95  \n   96  		if(base64_encode(result, polytype_len, base64Result) != 0) {\n   97: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\");\n   98  			return NULL;\n   99  		}\n  ...\n  120  	char * result = (char*) malloc(pathtype_len);\n  121  	if(result == NULL) {\n  122: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  123  		return NULL;\n  124  	}\n  ...\n  133  \n  134  		if(base64Result == NULL) {\n  135: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  136  			return NULL;\n  137  		}\n  138  \n  139  		if(base64_encode(result, pathtype_len, base64Result) != 0) {\n  140: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\");\n  141  			return NULL;\n  142  		}\n  ...\n  189  \n  190  		if(decodedString == NULL) {\n  191: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  192  			return objType;\n  193  		}\n  194  \n  195  		if(base64_decode(input, inputLen, decodedString, NULL) <= 0) {\n  196: 			fprintf(stderr, \"Error MySQL Sphere: Could not decode the MySQL object provided!\\n\");\n  197  			free(decodedString);\n  198  			return objType;\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/serialiser_helper.h:\n    7  	char * result = (char*) malloc(SPHERETYPE_LEN); \\\n    8  	if(result == NULL) { \\\n    9: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\"); \\\n   10  		return NULL; \\\n   11  	} \\\n   ..\n   20   \\\n   21  		if(base64Result == NULL) { \\\n   22: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\"); \\\n   23  			return NULL; \\\n   24  		} \\\n   25   \\\n   26  		if(base64_encode(result, SPHERETYPE_LEN, base64Result) != 0) { \\\n   27: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\"); \\\n   28  			return NULL; \\\n   29  		} \\\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sparse.cc:\n  721  # if YYLTYPE_IS_TRIVIAL\n  722  #  define YY_LOCATION_PRINT(File, Loc)			\\\n  723:      fprintf (File, \"%d.%d-%d.%d\",			\\\n  724  	      (Loc).first_line, (Loc).first_column,	\\\n  725  	      (Loc).last_line,  (Loc).last_column)\n  ...\n  741  #if YYDEBUG\n  742  \n  743: # ifndef YYFPRINTF\n  744  #  include <stdio.h> /* INFRINGES ON USER NAME SPACE */\n  745: #  define YYFPRINTF fprintf\n  746  # endif\n  747  \n  ...\n  749  do {						\\\n  750    if (yydebug)					\\\n  751:     YYFPRINTF Args;				\\\n  752  } while (YYID (0))\n  753  \n  ...\n  756    if (yydebug)								  \\\n  757      {									  \\\n  758:       YYFPRINTF (stderr, \"%s \", Title);					  \\\n  759        yy_symbol_print (stderr,						  \\\n  760  		  Type, Value); \\\n  761:       YYFPRINTF (stderr, \"\\n\");						  \\\n  762      }									  \\\n  763  } while (YYID (0))\n  ...\n  814  {\n  815    if (yytype < YYNTOKENS)\n  816:     YYFPRINTF (yyoutput, \"token %s (\", yytname[yytype]);\n  817    else\n  818:     YYFPRINTF (yyoutput, \"nterm %s (\", yytname[yytype]);\n  819  \n  820    yy_symbol_value_print (yyoutput, yytype, yyvaluep);\n  821:   YYFPRINTF (yyoutput, \")\");\n  822  }\n  823  \n  ...\n  838  #endif\n  839  {\n  840:   YYFPRINTF (stderr, \"Stack now\");\n  841    for (; bottom <= top; ++bottom)\n  842:     YYFPRINTF (stderr, \" %d\", *bottom);\n  843:   YYFPRINTF (stderr, \"\\n\");\n  844  }\n  845  \n  ...\n  869    int yyi;\n  870    unsigned long int yylno = yyrline[yyrule];\n  871:   YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",\n  872  	     yyrule - 1, yylno);\n  873    /* The symbols being reduced.  */\n  874    for (yyi = 0; yyi < yynrhs; yyi++)\n  875      {\n  876:       fprintf (stderr, \"   $%d = \", yyi + 1);\n  877        yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],\n  878  		       &(yyvsp[(yyi + 1) - (yynrhs)])\n  879  		       		       );\n  880:       fprintf (stderr, \"\\n\");\n  881      }\n  882  }\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sscan.cc:\n 1663  static void yy_fatal_error (yyconst char* msg )\n 1664  {\n 1665:     	(void) fprintf( stderr, \"%s\\n\", msg );\n 1666  	exit( YY_EXIT_FAILURE );\n 1667  }\n\n56 matches across 11 files\n\n\nSearching 118 files for \"fprintf\"\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/box.cc:\n  632  		reset_buffer();\n  633  		free( box );\n  634: 		fprintf ( stderr , \"spherebox_in: wrong data type\" );\n  635  		return NULL;\n  636  	}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/circle.cc:\n   78  		free( c );\n   79  		c = NULL;\n   80: 		fprintf (stderr, \"spherecircle_in: radius must be not greater than 90 degrees\\n\" );\n   81  		return NULL;\n   82  	  } else if ( FPeq(c->radius,PIH) ){\n   ..\n   89  	  free( c );\n   90  	  c = NULL;\n   91: 	  fprintf (stderr, \"spherecircle_in: parse error\\n\" );\n   92  	}\n   93  	return ( c );\n   ..\n  240  	SCircle * c  ;\n  241  	if ( FPgt(rad,PIH) || FPlt(rad,0.0) ){\n  242: 		fprintf ( stderr , \"radius must be not greater than 90 degrees or less than 0\\n\" );\n  243  		return NULL;\n  244  	}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/ellipse.cc:\n  110  		free( e );\n  111  		e = NULL;\n  112: 		fprintf ( stderr , \"sphereellipse_in: radius must be less than 90 degrees\" );\n  113  	} else {\n  114  		sellipse_check ( e );\n  ...\n  397  			} while ( cntr < maxcntr && ( ( sp[2].lng - sp[0].lng ) > FLT_EPSILON ) );\n  398  			if ( cntr >= maxcntr ){\n  399: 				fprintf ( stderr, \"Bug found in pg_sphere function 'sellipse_ellipse_pos' ! \\n Please report it to pg_sphere team.\");\n  400  				return 0;\n  401  			}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/euler.cc:\n   77  		free( se );\n   78  		se = NULL;\n   79: 		fprintf ( stderr , \"spheretrans_in: parse error\" );\n   80  		return NULL;\n   81  	}\n   ..\n  114  		if ( t == 0 ) {\n  115  			free ( se );\n  116: 			fprintf ( stderr, \"invalid axis format\" );\n  117  			return NULL;\n  118  		}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/line.cc:\n  573  		free( sl );\n  574  		sl = NULL;\n  575: 		fprintf ( stderr , \"sphereline_in: parse error\" );\n  576  	}\n  577  	reset_buffer();\n  ...\n  600  		free( sl );\n  601  		sl = NULL;\n  602: 		fprintf ( stderr , \"sphereline_from_points: length of line must be not equal 180 degrees\" );\n  603  	}\n  604  \n  ...\n  610  	if ( FPlt( l, 0.0 ) ) {\n  611  		free ( sl );\n  612: 		fprintf ( stderr , \"sphereline_from_trans: length of line must be >= 0\" );\n  613  		return NULL;\n  614  	} else {\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/path.cc:\n   48  \n   49  	if ( nelem < 2 ) {\n   50: 		fprintf ( stderr , \"spherepath_from_array: more than one point needed\" );\n   51  		return NULL;\n   52  	} else {\n   ..\n   73  		}\n   74  		if ( nelem < 2 ){\n   75: 			fprintf (stderr , \"spherepath_from_array: more than one point needed\" );\n   76  			return NULL;\n   77  		}\n   ..\n   85  				scheck = spoint_dist ( &arr[i-1], &arr[i] );\n   86  				if (FPeq(scheck, PI)) {\n   87: 					fprintf (stderr , \"spherepath_from_array: a path segment length must be not equal 180 degrees.\" );\n   88  					return NULL;\n   89  				}\n   ..\n  420  	} else {\n  421  		reset_buffer();\n  422: 		fprintf (stderr , \"spherepath_in: more than one point needed\" );\n  423  		return NULL;\n  424  	}\n  ...\n  660  	// Skip if distance is equal 180deg\n  661  	if ( FPeq ( spoint_dist ( p, &path->p[ path->npts - 1 ]), PI ) ) {\n  662: 		fprintf ( stderr, \"NOTICE: spath(spoint): Skip point, distance of previous point is 180deg\" );\n  663  	}\n  664  \n  ...\n  679  \n  680  	if ( path->npts < 2 ) {\n  681: 		fprintf ( stderr, \"NOTICE: spath(spoint): At least 2 points required\" );\n  682  		free ( path );\n  683  		return NULL;\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/polygon.cc:\n  132  \n  133  	if ( nelem < 3 ){\n  134: 		fprintf ( stderr , \"spherepoly_from_array: more than two points needed\" );\n  135  		return NULL;\n  136  	} else {\n  ...\n  160  		}\n  161  		if ( nelem < 3 ){\n  162: 			fprintf ( stderr , \"spherepoly_from_array: more than two points needed\" );\n  163  			return NULL;\n  164  		}\n  ...\n  175  			}\n  176  			if ( FPeq( scheck, PI ) ) {\n  177: 				fprintf ( stderr , \"spherepoly_from_array: a polygon segment length must be not equal 180 degrees.\" );\n  178  				return NULL;\n  179  			}\n  ...\n  184  \n  185  	if ( ! spherepoly_check ( poly ) ){\n  186: 		fprintf ( stderr , \"spherepoly_from_array: a line segment overlaps or polygon too large\" );\n  187  		free ( poly ) ;\n  188  		return NULL;\n  ...\n  490  			}\n  491  			if ( cntr > 10000 ) {\n  492: 				fprintf(stderr, \"WARNING: Bug found in spoly_contains_point\");\n  493: 				fprintf(stderr, \"ERROR: Please report it to mysql_sphere team!\");\n  494  				return false;\n  495  			}\n  ...\n  616  	} else {\n  617  		reset_buffer();\n  618: 		fprintf ( stderr, \"spherepoly_in: more than two points needed\" );\n  619  		return NULL;\n  620  	}\n  ...\n  894  	// Skip if distance is equal 180deg\n  895  	if ( FPeq ( spoint_dist ( p, &poly->p[ poly->npts - 1 ]) , PI ) ) {\n  896: 		fprintf ( stderr, \"NOTICE: spoly(spoint): Skip point, distance of previous point is 180deg\" );\n  897  	}\n  898  \n  ...\n  915  \n  916  	if ( poly->npts < 3 ) {\n  917: 		fprintf ( stderr, \"NOTICE: spoly(spoint): At least 3 points required\" );\n  918  		return NULL;\n  919  	}\n  920  	// Skip if distance is equal 180deg\n  921  	if ( FPeq ( spoint_dist ( &poly->p[0], &poly->p[ poly->npts - 1 ]), PI ) ) {\n  922: 		fprintf ( stderr, \"NOTICE: spoly(spoint): Cannot close polygon. Distance between first and last point is 180deg\" );\n  923  		return NULL;\n  924  	}\n  925  \n  926  	if ( !spherepoly_check ( poly ) ) {\n  927: 		fprintf ( stderr, \"NOTICE: spoly(spoint): a line segment overlaps or polygon too large\" );\n  928  		return NULL;\n  929  	}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/serialiser.cc:\n   77  	char * result = (char*) malloc(polytype_len);\n   78  	if(result == NULL) {\n   79: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n   80  		return NULL;\n   81  	}\n   ..\n   90  \n   91  		if(base64Result == NULL) {\n   92: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n   93  			return NULL;\n   94  		}\n   95  \n   96  		if(base64_encode(result, polytype_len, base64Result) != 0) {\n   97: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\");\n   98  			return NULL;\n   99  		}\n  ...\n  120  	char * result = (char*) malloc(pathtype_len);\n  121  	if(result == NULL) {\n  122: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  123  		return NULL;\n  124  	}\n  ...\n  133  \n  134  		if(base64Result == NULL) {\n  135: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  136  			return NULL;\n  137  		}\n  138  \n  139  		if(base64_encode(result, pathtype_len, base64Result) != 0) {\n  140: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\");\n  141  			return NULL;\n  142  		}\n  ...\n  189  \n  190  		if(decodedString == NULL) {\n  191: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  192  			return objType;\n  193  		}\n  194  \n  195  		if(base64_decode(input, inputLen, decodedString, NULL) <= 0) {\n  196: 			fprintf(stderr, \"Error MySQL Sphere: Could not decode the MySQL object provided!\\n\");\n  197  			free(decodedString);\n  198  			return objType;\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/serialiser_helper.h:\n    7  	char * result = (char*) malloc(SPHERETYPE_LEN); \\\n    8  	if(result == NULL) { \\\n    9: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\"); \\\n   10  		return NULL; \\\n   11  	} \\\n   ..\n   20   \\\n   21  		if(base64Result == NULL) { \\\n   22: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\"); \\\n   23  			return NULL; \\\n   24  		} \\\n   25   \\\n   26  		if(base64_encode(result, SPHERETYPE_LEN, base64Result) != 0) { \\\n   27: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\"); \\\n   28  			return NULL; \\\n   29  		} \\\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sparse.cc:\n  721  # if YYLTYPE_IS_TRIVIAL\n  722  #  define YY_LOCATION_PRINT(File, Loc)			\\\n  723:      fprintf (File, \"%d.%d-%d.%d\",			\\\n  724  	      (Loc).first_line, (Loc).first_column,	\\\n  725  	      (Loc).last_line,  (Loc).last_column)\n  ...\n  741  #if YYDEBUG\n  742  \n  743: # ifndef YYFPRINTF\n  744  #  include <stdio.h> /* INFRINGES ON USER NAME SPACE */\n  745: #  define YYFPRINTF fprintf\n  746  # endif\n  747  \n  ...\n  749  do {						\\\n  750    if (yydebug)					\\\n  751:     YYFPRINTF Args;				\\\n  752  } while (YYID (0))\n  753  \n  ...\n  756    if (yydebug)								  \\\n  757      {									  \\\n  758:       YYFPRINTF (stderr, \"%s \", Title);					  \\\n  759        yy_symbol_print (stderr,						  \\\n  760  		  Type, Value); \\\n  761:       YYFPRINTF (stderr, \"\\n\");						  \\\n  762      }									  \\\n  763  } while (YYID (0))\n  ...\n  814  {\n  815    if (yytype < YYNTOKENS)\n  816:     YYFPRINTF (yyoutput, \"token %s (\", yytname[yytype]);\n  817    else\n  818:     YYFPRINTF (yyoutput, \"nterm %s (\", yytname[yytype]);\n  819  \n  820    yy_symbol_value_print (yyoutput, yytype, yyvaluep);\n  821:   YYFPRINTF (yyoutput, \")\");\n  822  }\n  823  \n  ...\n  838  #endif\n  839  {\n  840:   YYFPRINTF (stderr, \"Stack now\");\n  841    for (; bottom <= top; ++bottom)\n  842:     YYFPRINTF (stderr, \" %d\", *bottom);\n  843:   YYFPRINTF (stderr, \"\\n\");\n  844  }\n  845  \n  ...\n  869    int yyi;\n  870    unsigned long int yylno = yyrline[yyrule];\n  871:   YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",\n  872  	     yyrule - 1, yylno);\n  873    /* The symbols being reduced.  */\n  874    for (yyi = 0; yyi < yynrhs; yyi++)\n  875      {\n  876:       fprintf (stderr, \"   $%d = \", yyi + 1);\n  877        yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],\n  878  		       &(yyvsp[(yyi + 1) - (yynrhs)])\n  879  		       		       );\n  880:       fprintf (stderr, \"\\n\");\n  881      }\n  882  }\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sscan.cc:\n 1663  static void yy_fatal_error (yyconst char* msg )\n 1664  {\n 1665:     	(void) fprintf( stderr, \"%s\\n\", msg );\n 1666  	exit( YY_EXIT_FAILURE );\n 1667  }\n\n56 matches across 11 files\n\n\nSearching 118 files for \"fprintf\"\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/box.cc:\n  632  		reset_buffer();\n  633  		free( box );\n  634: 		fprintf ( stderr , \"spherebox_in: wrong data type\" );\n  635  		return NULL;\n  636  	}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/circle.cc:\n   78  		free( c );\n   79  		c = NULL;\n   80: 		fprintf (stderr, \"spherecircle_in: radius must be not greater than 90 degrees\\n\" );\n   81  		return NULL;\n   82  	  } else if ( FPeq(c->radius,PIH) ){\n   ..\n   89  	  free( c );\n   90  	  c = NULL;\n   91: 	  fprintf (stderr, \"spherecircle_in: parse error\\n\" );\n   92  	}\n   93  	return ( c );\n   ..\n  240  	SCircle * c  ;\n  241  	if ( FPgt(rad,PIH) || FPlt(rad,0.0) ){\n  242: 		fprintf ( stderr , \"radius must be not greater than 90 degrees or less than 0\\n\" );\n  243  		return NULL;\n  244  	}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/ellipse.cc:\n  110  		free( e );\n  111  		e = NULL;\n  112: 		fprintf ( stderr , \"sphereellipse_in: radius must be less than 90 degrees\" );\n  113  	} else {\n  114  		sellipse_check ( e );\n  ...\n  397  			} while ( cntr < maxcntr && ( ( sp[2].lng - sp[0].lng ) > FLT_EPSILON ) );\n  398  			if ( cntr >= maxcntr ){\n  399: 				fprintf ( stderr, \"Bug found in pg_sphere function 'sellipse_ellipse_pos' ! \\n Please report it to pg_sphere team.\");\n  400  				return 0;\n  401  			}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/euler.cc:\n   77  		free( se );\n   78  		se = NULL;\n   79: 		fprintf ( stderr , \"spheretrans_in: parse error\" );\n   80  		return NULL;\n   81  	}\n   ..\n  114  		if ( t == 0 ) {\n  115  			free ( se );\n  116: 			fprintf ( stderr, \"invalid axis format\" );\n  117  			return NULL;\n  118  		}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/line.cc:\n  573  		free( sl );\n  574  		sl = NULL;\n  575: 		fprintf ( stderr , \"sphereline_in: parse error\" );\n  576  	}\n  577  	reset_buffer();\n  ...\n  600  		free( sl );\n  601  		sl = NULL;\n  602: 		fprintf ( stderr , \"sphereline_from_points: length of line must be not equal 180 degrees\" );\n  603  	}\n  604  \n  ...\n  610  	if ( FPlt( l, 0.0 ) ) {\n  611  		free ( sl );\n  612: 		fprintf ( stderr , \"sphereline_from_trans: length of line must be >= 0\" );\n  613  		return NULL;\n  614  	} else {\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/path.cc:\n   48  \n   49  	if ( nelem < 2 ) {\n   50: 		fprintf ( stderr , \"spherepath_from_array: more than one point needed\" );\n   51  		return NULL;\n   52  	} else {\n   ..\n   73  		}\n   74  		if ( nelem < 2 ){\n   75: 			fprintf (stderr , \"spherepath_from_array: more than one point needed\" );\n   76  			return NULL;\n   77  		}\n   ..\n   85  				scheck = spoint_dist ( &arr[i-1], &arr[i] );\n   86  				if (FPeq(scheck, PI)) {\n   87: 					fprintf (stderr , \"spherepath_from_array: a path segment length must be not equal 180 degrees.\" );\n   88  					return NULL;\n   89  				}\n   ..\n  420  	} else {\n  421  		reset_buffer();\n  422: 		fprintf (stderr , \"spherepath_in: more than one point needed\" );\n  423  		return NULL;\n  424  	}\n  ...\n  660  	// Skip if distance is equal 180deg\n  661  	if ( FPeq ( spoint_dist ( p, &path->p[ path->npts - 1 ]), PI ) ) {\n  662: 		fprintf ( stderr, \"NOTICE: spath(spoint): Skip point, distance of previous point is 180deg\" );\n  663  	}\n  664  \n  ...\n  679  \n  680  	if ( path->npts < 2 ) {\n  681: 		fprintf ( stderr, \"NOTICE: spath(spoint): At least 2 points required\" );\n  682  		free ( path );\n  683  		return NULL;\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/polygon.cc:\n  132  \n  133  	if ( nelem < 3 ){\n  134: 		fprintf ( stderr , \"spherepoly_from_array: more than two points needed\" );\n  135  		return NULL;\n  136  	} else {\n  ...\n  160  		}\n  161  		if ( nelem < 3 ){\n  162: 			fprintf ( stderr , \"spherepoly_from_array: more than two points needed\" );\n  163  			return NULL;\n  164  		}\n  ...\n  175  			}\n  176  			if ( FPeq( scheck, PI ) ) {\n  177: 				fprintf ( stderr , \"spherepoly_from_array: a polygon segment length must be not equal 180 degrees.\" );\n  178  				return NULL;\n  179  			}\n  ...\n  184  \n  185  	if ( ! spherepoly_check ( poly ) ){\n  186: 		fprintf ( stderr , \"spherepoly_from_array: a line segment overlaps or polygon too large\" );\n  187  		free ( poly ) ;\n  188  		return NULL;\n  ...\n  490  			}\n  491  			if ( cntr > 10000 ) {\n  492: 				fprintf(stderr, \"WARNING: Bug found in spoly_contains_point\");\n  493: 				fprintf(stderr, \"ERROR: Please report it to mysql_sphere team!\");\n  494  				return false;\n  495  			}\n  ...\n  616  	} else {\n  617  		reset_buffer();\n  618: 		fprintf ( stderr, \"spherepoly_in: more than two points needed\" );\n  619  		return NULL;\n  620  	}\n  ...\n  894  	// Skip if distance is equal 180deg\n  895  	if ( FPeq ( spoint_dist ( p, &poly->p[ poly->npts - 1 ]) , PI ) ) {\n  896: 		fprintf ( stderr, \"NOTICE: spoly(spoint): Skip point, distance of previous point is 180deg\" );\n  897  	}\n  898  \n  ...\n  915  \n  916  	if ( poly->npts < 3 ) {\n  917: 		fprintf ( stderr, \"NOTICE: spoly(spoint): At least 3 points required\" );\n  918  		return NULL;\n  919  	}\n  920  	// Skip if distance is equal 180deg\n  921  	if ( FPeq ( spoint_dist ( &poly->p[0], &poly->p[ poly->npts - 1 ]), PI ) ) {\n  922: 		fprintf ( stderr, \"NOTICE: spoly(spoint): Cannot close polygon. Distance between first and last point is 180deg\" );\n  923  		return NULL;\n  924  	}\n  925  \n  926  	if ( !spherepoly_check ( poly ) ) {\n  927: 		fprintf ( stderr, \"NOTICE: spoly(spoint): a line segment overlaps or polygon too large\" );\n  928  		return NULL;\n  929  	}\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/serialiser.cc:\n   77  	char * result = (char*) malloc(polytype_len);\n   78  	if(result == NULL) {\n   79: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n   80  		return NULL;\n   81  	}\n   ..\n   90  \n   91  		if(base64Result == NULL) {\n   92: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n   93  			return NULL;\n   94  		}\n   95  \n   96  		if(base64_encode(result, polytype_len, base64Result) != 0) {\n   97: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\");\n   98  			return NULL;\n   99  		}\n  ...\n  120  	char * result = (char*) malloc(pathtype_len);\n  121  	if(result == NULL) {\n  122: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  123  		return NULL;\n  124  	}\n  ...\n  133  \n  134  		if(base64Result == NULL) {\n  135: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  136  			return NULL;\n  137  		}\n  138  \n  139  		if(base64_encode(result, pathtype_len, base64Result) != 0) {\n  140: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\");\n  141  			return NULL;\n  142  		}\n  ...\n  189  \n  190  		if(decodedString == NULL) {\n  191: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\");\n  192  			return objType;\n  193  		}\n  194  \n  195  		if(base64_decode(input, inputLen, decodedString, NULL) <= 0) {\n  196: 			fprintf(stderr, \"Error MySQL Sphere: Could not decode the MySQL object provided!\\n\");\n  197  			free(decodedString);\n  198  			return objType;\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/serialiser_helper.h:\n    7  	char * result = (char*) malloc(SPHERETYPE_LEN); \\\n    8  	if(result == NULL) { \\\n    9: 		fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\"); \\\n   10  		return NULL; \\\n   11  	} \\\n   ..\n   20   \\\n   21  		if(base64Result == NULL) { \\\n   22: 			fprintf(stderr, \"Error MySQL Sphere: Out of memory\\n\"); \\\n   23  			return NULL; \\\n   24  		} \\\n   25   \\\n   26  		if(base64_encode(result, SPHERETYPE_LEN, base64Result) != 0) { \\\n   27: 			fprintf(stderr, \"Error MySQL Sphere: Could not convert to base64!\\n\"); \\\n   28  			return NULL; \\\n   29  		} \\\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sparse.cc:\n  721  # if YYLTYPE_IS_TRIVIAL\n  722  #  define YY_LOCATION_PRINT(File, Loc)			\\\n  723:      fprintf (File, \"%d.%d-%d.%d\",			\\\n  724  	      (Loc).first_line, (Loc).first_column,	\\\n  725  	      (Loc).last_line,  (Loc).last_column)\n  ...\n  741  #if YYDEBUG\n  742  \n  743: # ifndef YYFPRINTF\n  744  #  include <stdio.h> /* INFRINGES ON USER NAME SPACE */\n  745: #  define YYFPRINTF fprintf\n  746  # endif\n  747  \n  ...\n  749  do {						\\\n  750    if (yydebug)					\\\n  751:     YYFPRINTF Args;				\\\n  752  } while (YYID (0))\n  753  \n  ...\n  756    if (yydebug)								  \\\n  757      {									  \\\n  758:       YYFPRINTF (stderr, \"%s \", Title);					  \\\n  759        yy_symbol_print (stderr,						  \\\n  760  		  Type, Value); \\\n  761:       YYFPRINTF (stderr, \"\\n\");						  \\\n  762      }									  \\\n  763  } while (YYID (0))\n  ...\n  814  {\n  815    if (yytype < YYNTOKENS)\n  816:     YYFPRINTF (yyoutput, \"token %s (\", yytname[yytype]);\n  817    else\n  818:     YYFPRINTF (yyoutput, \"nterm %s (\", yytname[yytype]);\n  819  \n  820    yy_symbol_value_print (yyoutput, yytype, yyvaluep);\n  821:   YYFPRINTF (yyoutput, \")\");\n  822  }\n  823  \n  ...\n  838  #endif\n  839  {\n  840:   YYFPRINTF (stderr, \"Stack now\");\n  841    for (; bottom <= top; ++bottom)\n  842:     YYFPRINTF (stderr, \" %d\", *bottom);\n  843:   YYFPRINTF (stderr, \"\\n\");\n  844  }\n  845  \n  ...\n  869    int yyi;\n  870    unsigned long int yylno = yyrline[yyrule];\n  871:   YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",\n  872  	     yyrule - 1, yylno);\n  873    /* The symbols being reduced.  */\n  874    for (yyi = 0; yyi < yynrhs; yyi++)\n  875      {\n  876:       fprintf (stderr, \"   $%d = \", yyi + 1);\n  877        yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],\n  878  		       &(yyvsp[(yyi + 1) - (yynrhs)])\n  879  		       		       );\n  880:       fprintf (stderr, \"\\n\");\n  881      }\n  882  }\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sscan.cc:\n 1663  static void yy_fatal_error (yyconst char* msg )\n 1664  {\n 1665:     	(void) fprintf( stderr, \"%s\\n\", msg );\n 1666  	exit( YY_EXIT_FAILURE );\n 1667  }\n\n56 matches across 11 files\n\n\nSearching 128 files for \"mysql-sphere\"\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/README:\n    1  +-----------------------------------------------------------------------------+\n    2: |                 mysql-sphere 0.1 for MySQL 5.5 and MariaDB                  |\n    3  +-----------------------------------------------------------------------------+\n    4  \n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/appendixes.html:\n   84  ><A\n   85  NAME=\"appendixes.changelog\"\n   86: >10.1. First release candidate of the pgSphere port mysql-sphere 0.1</A\n   87  ></H2\n   88  ><P\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/construct.html:\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n   ..\n   90  >&#13;          Constructors within <SPAN\n   91  CLASS=\"application\"\n   92: >mysql-sphere</SPAN\n   93: > are in no way different to defining mysql-sphere objects, just with other\n   94    options. They are in a way overloaded construction functions from the previous\n   95    chapter. In pgSphere a distinction between type definition and construction was\n   96:   made, mainly due to the capabilities of PostgreSQL. In mysql-sphere this is not\n   97    needed anymore and the following sections describe\n   98            functions needed to create spherical data types from other data\n   ..\n  100              <SPAN\n  101  CLASS=\"application\"\n  102: >mysql-sphere</SPAN\n  103  > constructor\n  104            functions are named by returned data type. Constructor functions\n  ...\n  162  CLASS=\"parameter\"\n  163  >path</CODE\n  164: > is a mysql-sphere path binary BLOB, <CODE\n  165  CLASS=\"parameter\"\n  166  >i</CODE\n  ...\n  255              <SPAN\n  256  CLASS=\"application\"\n  257: >mysql-sphere</SPAN\n  258  > will assume <TT\n  259  CLASS=\"literal\"\n  ...\n  419  CLASS=\"literal\"\n  420  >sstr</TT\n  421: > casts a given mysql-sphere data type to a readable string).\n  422              </P\n  423  ><TABLE\n  ...\n  532  CLASS=\"literal\"\n  533  >sstr</TT\n  534: > casts a given mysql-sphere data type to a readable string):\n  535              </P\n  536  ><TABLE\n  ...\n  760  CLASS=\"literal\"\n  761  >sstr</TT\n  762: > casts a given mysql-sphere data type to a readable string).\n  763              </P\n  764  ><TABLE\n  ...\n  852  CLASS=\"literal\"\n  853  >sstr</TT\n  854: > casts a given mysql-sphere data type to a readable string).\n  855              </P\n  856  ><TABLE\n  ...\n  955  CLASS=\"literal\"\n  956  >sstr</TT\n  957: > casts a given mysql-sphere data type to a readable string).\n  958              </P\n  959  ><TABLE\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/examples.html:\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/funcs.html:\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n   ..\n   89  ><P\n   90  >&#13;          The functions described below are implemented in pgSphere without having an\n   91:           operator. In mysql-sphere they are equally used, but their names just differ by a\n   92            prepending 's' to avoid conflict with already existing functions. If you are missing some functions, see\n   93            <A\n   ..\n  412  ></P\n  413  > cannot be ported to MySQL since a UDF function can only return one value and not as in PostgreSQL\n  414: a rowset. Therefore the equivalent mysql-sphere function does not exist.\n  415  </DIV\n  416  ></DIV\n  ...\n  695  >&#13;              <SPAN\n  696  CLASS=\"application\"\n  697: >mysql-sphere</SPAN\n  698  > provides 4 functions to get\n  699                the parameters of a spherical ellipse:\n  ...\n  833                  <SPAN\n  834  CLASS=\"application\"\n  835: >mysql-sphere</SPAN\n  836  > provides two functions:\n  837                </P\n  ...\n 1045  >&#13;              <SPAN\n 1046  CLASS=\"application\"\n 1047: >mysql-sphere</SPAN\n 1048  > provides two functions to\n 1049                get points at a path.\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/index.html:\n    4              pgSphere 1.1\n    5          </title><meta name=\"GENERATOR\" content=\"Modular DocBook HTML Stylesheet Version 1.79\"><link rel=\"NEXT\" title=\"\n    6:             What is mysql-sphere?\n    7          \" href=\"./x18.html\"><link rel=\"STYLESHEET\" type=\"text/css\" href=\"./img/pg_sphere.css\"><meta name=\"creation\" content=\"2009-07-06T05:33:03\">\n    8  \n    9: </head><body class=\"article\" bgcolor=\"#FFFFFF\" text=\"#000000\" link=\"#0000FF\" vlink=\"#840084\" alink=\"#0000FF\"><div class=\"ARTICLE\"><div class=\"TITLEPAGE\"><h1 class=\"title\"><a name=\"AEN2\">mysql-sphere 0.1 based on pgSphere 1.2</a></h1><h3 class=\"author\"><a name=\"AEN4\">Port by: Adrian M. Partl<br>Original: The pgSphere team</a></h3><div><div class=\"abstract\"><p></p><a name=\"AEN6\"></a><p>\n   10                </p><div class=\"mediaobject\"><p><img src=\"./img/logo.jpg\" width=\"225px\"><font size=\"+3\">now available for dolphins!</font></p></div>\n   11              <p></p><p>\n   12:                 <span class=\"application\">mysql-sphere</span> provides spherical data\n   13                  types, functions, and operators for\n   14                  <span class=\"application\">MySQL and MariaDB</span>. It is based on pgSphere 1.2 (see <a href=\"http://pgsphere.projects.pgfoundry.org/\" target=\"_top\">http://pgsphere.projects.pgfoundry.org/</a>and constitutes a port of pgSphere\n   ..\n   19                  This document\n   20                  describes installation and usage of this module.\n   21:             </p><p></p></div></div><hr></div><div class=\"TOC\"><dl><dt><b>Table of Contents</b></dt><dt>1. <a href=\"./x18.html\">What is mysql-sphere?</a></dt><dt>2. <a href=\"./x44.html\">Installation</a></dt><dd><dl><dt>2.1. <a href=\"./x44.html#AEN46\">Download</a></dt><dt>2.2. <a href=\"./x44.html#AEN54\">Installation</a></dt><dt>2.3. <a href=\"./x44.html#AEN93\">Creating a database with <span class=\"application\">pgSphere</span></a></dt></dl></dd><dt>3. <a href=\"./types.html\">Data types</a></dt><dd><dl><dt>3.1. <a href=\"./types.html#dt.over\">Overview</a></dt><dt>3.2. <a href=\"./types.html#dt.spoint\">Point</a></dt><dt>3.3. <a href=\"./types.html#dt.strans\">Euler transformation</a></dt><dt>3.4. <a href=\"./types.html#dt.scircle\">Circle</a></dt><dt>3.5. <a href=\"./types.html#dt.sline\">Line</a></dt><dt>3.6. <a href=\"./types.html#dt.sellipse\">Ellipses</a></dt><dt>3.7. <a href=\"./types.html#dt.spath\">Path</a></dt><dt>3.8. <a href=\"./types.html#dt.spoly\">Polygon</a></dt><dt>3.9. <a href=\"./types.html#dt.sbox\">Coordinates range</a></dt></dl></dd><dt>4. <a href=\"./construct.html\">Constructors</a></dt><dd><dl><dt>4.1. <a href=\"./construct.html#contr.spoint\">Point</a></dt><dt>4.2. <a href=\"./construct.html#contr.strans\">Euler transformation</a></dt><dt>4.3. <a href=\"./construct.html#contr.scircle\">Circle</a></dt><dt>4.4. <a href=\"./construct.html#contr.sline\">Line</a></dt><dt>4.5. <a href=\"./construct.html#contr.sellipse\">Ellipse</a></dt><dt>4.6. <a href=\"./construct.html#contr.spoly\">Polygon</a></dt><dt>4.7. <a href=\"./construct.html#contr.spath\">Path</a></dt><dt>4.8. <a href=\"./construct.html#contr.sbox\">Coordinates range</a></dt></dl></dd><dt>5. <a href=\"./operators.html\">Operators</a></dt><dd><dl><dt>5.1. <a href=\"./operators.html#op.casting\">Casting</a></dt><dt>5.2. <a href=\"./operators.html#op.equal\">Equality</a></dt><dt>5.3. <a href=\"./operators.html#op.over\">Contain and overlap</a></dt><dt>5.4. <a href=\"./operators.html#op.cross\">Crossing of lines</a></dt><dt>5.5. <a href=\"./operators.html#op.dist\">Distance</a></dt><dt>5.6. <a href=\"./operators.html#op.circum\">Length and circumference</a></dt><dt>5.7. <a href=\"./operators.html#op.center\">Center</a></dt><dt>5.8. <a href=\"./operators.html#op.direction\">Change the direction</a></dt><dt>5.9. <a href=\"./operators.html#op.turnline\">Turn the path of a line</a></dt><dt>5.10. <a href=\"./operators.html#op.trans\">Transformation</a></dt></dl></dd><dt>6. <a href=\"./funcs.html\">Functions</a></dt><dd><dl><dt>6.1. <a href=\"./funcs.html#func.area\">Area function</a></dt><dt>6.2. <a href=\"./funcs.html#func.spoint\"><span class=\"type\">spoint</span> functions</a></dt><dt>6.3. <a href=\"./funcs.html#funcs.strans\"><span class=\"type\">strans</span> functions</a></dt><dt>6.4. <a href=\"./funcs.html#func.circle\">scircle functions</a></dt><dt>6.5. <a href=\"./funcs.html#funcs.sellipse\"><span class=\"type\">sellipse</span> functions</a></dt><dt>6.6. <a href=\"./funcs.html#funcs.sline\"><span class=\"type\">sline</span> functions</a></dt><dt>6.7. <a href=\"./funcs.html#funcs.spath\"><span class=\"type\">spath</span> functions</a></dt><dt>6.8. <a href=\"./funcs.html#funcs.spoly\"><span class=\"type\">spoly</span> functions</a></dt><dt>6.9. <a href=\"./funcs.html#funcs.sbox\"><span class=\"type\">sbox</span> functions</a></dt></dl></dd><dt>7. <a href=\"./indices.html\">Create an index</a></dt><dd><dl><dt>7.1. <a href=\"./indices.html#ind.sphere\">Spherical index</a></dt></dl></dd><dt>8. <a href=\"./examples.html\">Usage examples</a></dt><dd><dl><dt>8.1. <a href=\"./examples.html#examp.general\">General</a></dt><dt>8.2. <a href=\"./examples.html#examp.geo\">Geographical</a></dt><dt>8.3. <a href=\"./examples.html#examp.astro\">Astronomical</a></dt></dl></dd><dt>9. <a href=\"./x1240.html\">FAQ</a></dt><dt>10. <a href=\"./appendixes.html\">Appendixes</a></dt><dd><dl><dt>10.1. <a href=\"./appendixes.html#appendixes.changelog\">Changes from version 1.0 to 1.1</a></dt></dl></dd></dl></div></div><div class=\"NAVFOOTER\"><hr align=\"LEFT\" width=\"100%\"><table summary=\"Footer navigation table\" width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td width=\"33%\" align=\"left\" valign=\"top\">&nbsp;</td><td width=\"34%\" align=\"center\" valign=\"top\">&nbsp;</td><td width=\"33%\" align=\"right\" valign=\"top\"><a href=\"./x18.html\" accesskey=\"N\">Next</a></td></tr><tr><td width=\"33%\" align=\"left\" valign=\"top\">&nbsp;</td><td width=\"34%\" align=\"center\" valign=\"top\">&nbsp;</td><td width=\"33%\" align=\"right\" valign=\"top\">What is mysql-sphere?</td></tr></tbody></table></div></body></html>\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/indices.html:\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n   ..\n   90  CLASS=\"sect2\"\n   91  >\n   92: Indices are not yet supported by mysql-sphere, since MySQL does not allow easy extension of the\n   93: indexing facility. The developer of mysql-sphere still needs to fully understand how pgSphere does\n   94  the indexing (it is not really documented) and wheather this can be implemented easily by a smart\n   95  hashing algorithm that then uses the MySQL b-tree index provided with most storage engines.\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/operators.html:\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n   ..\n  107  >&#13;                <SPAN\n  108  CLASS=\"application\"\n  109: >mysql-sphere</SPAN\n  110  > provides different casting mechanisms than possible with pgSphere. These casting \n  111  	methods have been described in the section above, however will be summarised here\n  112  	again. So, you can transform an object to another data\n  113:                 type. A cast in mysql-sphere can only be done using a <TT\n  114  CLASS=\"literal\"\n  115  >typename(x)</TT\n  ...\n  313                      </TD\n  314  ><TD\n  315: >&#13;                     	a string representation of the according mysql-sphere type\n  316                      </TD\n  317  ></TR\n  ...\n  434                  <SPAN\n  435  CLASS=\"application\"\n  436: >mysql-sphere</SPAN\n  437  > supports such\n  438                  queries using special functions returning\n  ...\n  470  ><TH\n  471  ALIGN=\"center\"\n  472: >mysql-sphere operator</TH\n  473  ><TH\n  474  ALIGN=\"center\"\n  ...\n  632                  <SPAN\n  633  CLASS=\"application\"\n  634: >mysql-sphere</SPAN\n  635  > supports only crossing of\n  636                  lines.\n  ...\n  687                  <SPAN\n  688  CLASS=\"application\"\n  689: >mysql-sphere</SPAN\n  690  > supports only distances\n  691                  between points, circles, and between point and circle. If the\n  ...\n  743                  <SPAN\n  744  CLASS=\"application\"\n  745: >mysql-sphere</SPAN\n  746  > supports only\n  747                  circumferences of circles, polygons, and boxes.  It supports\n  ...\n  823                  current implementation of <SPAN\n  824  CLASS=\"application\"\n  825: >mysql-sphere</SPAN\n  826  >,\n  827                  only centers of circles and ellipses are supported. \n  ...\n 1034                  <SPAN\n 1035  CLASS=\"application\"\n 1036: >mysql-sphere</SPAN\n 1037  >, it is done using Euler\n 1038                  transformations (<SPAN\n ....\n 1070                  <SPAN\n 1071  CLASS=\"application\"\n 1072: >mysql-sphere</SPAN\n 1073  > data type, except the\n 1074                  data type <SPAN\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/types.html:\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n   ..\n   98  >&#13;                <SPAN\n   99  CLASS=\"productname\"\n  100: >mysql-sphere</SPAN\n  101  > provides spherical data\n  102                  types for storing with\n  ...\n  105  >MySQL / MariaDB</SPAN\n  106  >. This is achieved by storing the according data types as base64 encoded binary BLOBs. This means, that\n  107: to store mysql-sphere objects, you need to store them in <TT\n  108  CLASS=\"literal\"\n  109  >BLOB</TT\n  ...\n  237  ></DIV\n  238  >\n  239: If you feel that storing mysql-sphere data types as base64 encoded BLOBs is a unnecessary overhead, you can\n  240  choose to store them in plain binary by adjusting the <TT\n  241  CLASS=\"literal\"\n  ...\n  941                Within <SPAN\n  942  CLASS=\"application\"\n  943: >mysql-sphere</SPAN\n  944  >, ellipses are\n  945                defined as :\n  ...\n 1080                        <SPAN\n 1081  CLASS=\"application\"\n 1082: >mysql-sphere</SPAN\n 1083  > as a counterclockwise\n 1084                        rotation around the ellipse center and is zero, if the\n ....\n 1159  >&#13;                Paths within <SPAN\n 1160  CLASS=\"application\"\n 1161: >mysql-sphere</SPAN\n 1162  > are simplified\n 1163                  lists of positions. The input syntax is :\n ....\n 1261                Polygons within <SPAN\n 1262  CLASS=\"application\"\n 1263: >mysql-sphere</SPAN\n 1264  > \n 1265                have the same input syntax as paths:\n ....\n 1423                    <SPAN\n 1424  CLASS=\"application\"\n 1425: >mysql-sphere</SPAN\n 1426  > swaps the edges.\n 1427                  </P\n ....\n 1433                    <SPAN\n 1434  CLASS=\"application\"\n 1435: >mysql-sphere</SPAN\n 1436  > assumes a full latitude\n 1437                    range, except that the latitudes are equal, too.\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/x18.html:\n    3  ><HEAD\n    4  ><TITLE\n    5: >&#13;            What is mysql-sphere?\n    6          </TITLE\n    7  ><META\n    .\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   15  REL=\"PREVIOUS\"\n   16  TITLE=\"\n   17:             mysql-sphere 0.1 based on pgSphere 1.2\n   18          \"\n   19  HREF=\"index.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n   ..\n   85  ><A\n   86  NAME=\"AEN18\"\n   87: >1. What is mysql-sphere?</A\n   88  ></H1\n   89  ><P\n   90  >&#13;            <SPAN\n   91  CLASS=\"application\"\n   92: >mysql-sphere</SPAN\n   93  > is an extra module for\n   94              <SPAN\n   ..\n  157  	transformed to functions.</P><P>  The aim of <SPAN\n  158  CLASS=\"application\"\n  159: >mysql-sphere</SPAN\n  160  > is to provide \n  161              uniform access to spherical data. Because\n  162              <SPAN\n  163  CLASS=\"application\"\n  164: >mysql-sphere</SPAN\n  165  > itself supports a lot of\n  166              software interfaces, you can now use the same database\n  ...\n  212  ALIGN=\"left\"\n  213  VALIGN=\"top\"\n  214: >pmysql-sphere 0.1 based on pgSphere 1.2</TD\n  215  ><TD\n  216  WIDTH=\"34%\"\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/x44.html:\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   15  REL=\"PREVIOUS\"\n   16  TITLE=\"\n   17:             What is mysql-sphere?\n   18          \"\n   19  HREF=\"x18.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n   ..\n   99                  <SPAN\n  100  CLASS=\"application\"\n  101: >mysql-sphere</SPAN\n  102  > is not part of the <SPAN\n  103  CLASS=\"application\"\n  ...\n  106                  You can download it from the <SPAN\n  107  CLASS=\"application\"\n  108: >mysql-sphere</SPAN\n  109  > repository\n  110                  <A\n  111: HREF=\"http://github.com/adrpar/mysql-sphere/\"\n  112  TARGET=\"_top\"\n  113  ><I\n  114  CLASS=\"citetitle\"\n  115: >http://github.com/adrpar/mysql-sphere/</I\n  116  ></A\n  117  >\n  ...\n  140              </P\n  141  ><P\n  142: >&#13;                To compile mysql-sphere, you will need the sources of your MySQL or MariaDB installation.\n  143  </p> \n  144  <p>To compile <SPAN\n  145  CLASS=\"application\"\n  146: >mysql-sphere</SPAN\n  147  > you require cmake. </P>\n  148: <p>                After you have downloaded mysql-sphere from github, you need to edit the \n  149                  (<TT\n  150  CLASS=\"filename\"\n  151: >mysql-sphere/CMakeList.txt</TT\n  152  >) configuration file. There you either let cmake try to find your MySQL installation itself or\n  153  if required you need to ajust the path to your MySQL installation by uncommenting and setting \n  ...\n  218  >\n  219  \n  220: Afterwards you can build mysql-sphere the usual way by envoking\n  221  \n  222  <TABLE\n  ...\n  252  >.\n  253  \n  254: This should have copied the mysql-sphere pluging into the according MySQL / MariaDB plugin directory. If you\n  255  you need to do so manually. The next step will register the plugin with MySQL / MariaDB. For this, you invoke\n  256  \n  ...\n  270  >\n  271  \n  272: accordingly. With this, you should be ready to go. You can check if mysql-sphere has been successfully installed\n  273  by envoking\n  274  \n  ...\n  288  >\n  289  \n  290: You should see the current mysql-sphere version on your terminal. In order to uninstall mysql-sphere you can\n  291  run the following\n  292  \n\n82 matches across 11 files\n\n\nSearching 128 files for \"mysql-sphere\"\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/appendixes.html:\n   84  ><A\n   85  NAME=\"appendixes.changelog\"\n   86: >10.1. First release candidate of the pgSphere port mysql-sphere 0.1</A\n   87  ></H2\n   88  ><P\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/construct.html:\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n   ..\n   90  >&#13;          Constructors within <SPAN\n   91  CLASS=\"application\"\n   92: >mysql-sphere</SPAN\n   93: > are in no way different to defining mysql-sphere objects, just with other\n   94    options. They are in a way overloaded construction functions from the previous\n   95    chapter. In pgSphere a distinction between type definition and construction was\n   96:   made, mainly due to the capabilities of PostgreSQL. In mysql-sphere this is not\n   97    needed anymore and the following sections describe\n   98            functions needed to create spherical data types from other data\n   ..\n  100              <SPAN\n  101  CLASS=\"application\"\n  102: >mysql-sphere</SPAN\n  103  > constructor\n  104            functions are named by returned data type. Constructor functions\n  ...\n  162  CLASS=\"parameter\"\n  163  >path</CODE\n  164: > is a mysql-sphere path binary BLOB, <CODE\n  165  CLASS=\"parameter\"\n  166  >i</CODE\n  ...\n  255              <SPAN\n  256  CLASS=\"application\"\n  257: >mysql-sphere</SPAN\n  258  > will assume <TT\n  259  CLASS=\"literal\"\n  ...\n  419  CLASS=\"literal\"\n  420  >sstr</TT\n  421: > casts a given mysql-sphere data type to a readable string).\n  422              </P\n  423  ><TABLE\n  ...\n  532  CLASS=\"literal\"\n  533  >sstr</TT\n  534: > casts a given mysql-sphere data type to a readable string):\n  535              </P\n  536  ><TABLE\n  ...\n  760  CLASS=\"literal\"\n  761  >sstr</TT\n  762: > casts a given mysql-sphere data type to a readable string).\n  763              </P\n  764  ><TABLE\n  ...\n  852  CLASS=\"literal\"\n  853  >sstr</TT\n  854: > casts a given mysql-sphere data type to a readable string).\n  855              </P\n  856  ><TABLE\n  ...\n  955  CLASS=\"literal\"\n  956  >sstr</TT\n  957: > casts a given mysql-sphere data type to a readable string).\n  958              </P\n  959  ><TABLE\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/examples.html:\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/funcs.html:\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n   ..\n   89  ><P\n   90  >&#13;          The functions described below are implemented in pgSphere without having an\n   91:           operator. In mysql-sphere they are equally used, but their names just differ by a\n   92            prepending 's' to avoid conflict with already existing functions. If you are missing some functions, see\n   93            <A\n   ..\n  412  ></P\n  413  > cannot be ported to MySQL since a UDF function can only return one value and not as in PostgreSQL\n  414: a rowset. Therefore the equivalent mysql-sphere function does not exist.\n  415  </DIV\n  416  ></DIV\n  ...\n  695  >&#13;              <SPAN\n  696  CLASS=\"application\"\n  697: >mysql-sphere</SPAN\n  698  > provides 4 functions to get\n  699                the parameters of a spherical ellipse:\n  ...\n  833                  <SPAN\n  834  CLASS=\"application\"\n  835: >mysql-sphere</SPAN\n  836  > provides two functions:\n  837                </P\n  ...\n 1045  >&#13;              <SPAN\n 1046  CLASS=\"application\"\n 1047: >mysql-sphere</SPAN\n 1048  > provides two functions to\n 1049                get points at a path.\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/index.html:\n    4              pgSphere 1.1\n    5          </title><meta name=\"GENERATOR\" content=\"Modular DocBook HTML Stylesheet Version 1.79\"><link rel=\"NEXT\" title=\"\n    6:             What is mysql-sphere?\n    7          \" href=\"./x18.html\"><link rel=\"STYLESHEET\" type=\"text/css\" href=\"./img/pg_sphere.css\"><meta name=\"creation\" content=\"2009-07-06T05:33:03\">\n    8  \n    9: </head><body class=\"article\" bgcolor=\"#FFFFFF\" text=\"#000000\" link=\"#0000FF\" vlink=\"#840084\" alink=\"#0000FF\"><div class=\"ARTICLE\"><div class=\"TITLEPAGE\"><h1 class=\"title\"><a name=\"AEN2\">mysql-sphere 0.1 based on pgSphere 1.2</a></h1><h3 class=\"author\"><a name=\"AEN4\">Port by: Adrian M. Partl<br>Original: The pgSphere team</a></h3><div><div class=\"abstract\"><p></p><a name=\"AEN6\"></a><p>\n   10                </p><div class=\"mediaobject\"><p><img src=\"./img/logo.jpg\" width=\"225px\"><font size=\"+3\">now available for dolphins!</font></p></div>\n   11              <p></p><p>\n   12:                 <span class=\"application\">mysql-sphere</span> provides spherical data\n   13                  types, functions, and operators for\n   14                  <span class=\"application\">MySQL and MariaDB</span>. It is based on pgSphere 1.2 (see <a href=\"http://pgsphere.projects.pgfoundry.org/\" target=\"_top\">http://pgsphere.projects.pgfoundry.org/</a>and constitutes a port of pgSphere\n   ..\n   19                  This document\n   20                  describes installation and usage of this module.\n   21:             </p><p></p></div></div><hr></div><div class=\"TOC\"><dl><dt><b>Table of Contents</b></dt><dt>1. <a href=\"./x18.html\">What is mysql-sphere?</a></dt><dt>2. <a href=\"./x44.html\">Installation</a></dt><dd><dl><dt>2.1. <a href=\"./x44.html#AEN46\">Download</a></dt><dt>2.2. <a href=\"./x44.html#AEN54\">Installation</a></dt><dt>2.3. <a href=\"./x44.html#AEN93\">Creating a database with <span class=\"application\">pgSphere</span></a></dt></dl></dd><dt>3. <a href=\"./types.html\">Data types</a></dt><dd><dl><dt>3.1. <a href=\"./types.html#dt.over\">Overview</a></dt><dt>3.2. <a href=\"./types.html#dt.spoint\">Point</a></dt><dt>3.3. <a href=\"./types.html#dt.strans\">Euler transformation</a></dt><dt>3.4. <a href=\"./types.html#dt.scircle\">Circle</a></dt><dt>3.5. <a href=\"./types.html#dt.sline\">Line</a></dt><dt>3.6. <a href=\"./types.html#dt.sellipse\">Ellipses</a></dt><dt>3.7. <a href=\"./types.html#dt.spath\">Path</a></dt><dt>3.8. <a href=\"./types.html#dt.spoly\">Polygon</a></dt><dt>3.9. <a href=\"./types.html#dt.sbox\">Coordinates range</a></dt></dl></dd><dt>4. <a href=\"./construct.html\">Constructors</a></dt><dd><dl><dt>4.1. <a href=\"./construct.html#contr.spoint\">Point</a></dt><dt>4.2. <a href=\"./construct.html#contr.strans\">Euler transformation</a></dt><dt>4.3. <a href=\"./construct.html#contr.scircle\">Circle</a></dt><dt>4.4. <a href=\"./construct.html#contr.sline\">Line</a></dt><dt>4.5. <a href=\"./construct.html#contr.sellipse\">Ellipse</a></dt><dt>4.6. <a href=\"./construct.html#contr.spoly\">Polygon</a></dt><dt>4.7. <a href=\"./construct.html#contr.spath\">Path</a></dt><dt>4.8. <a href=\"./construct.html#contr.sbox\">Coordinates range</a></dt></dl></dd><dt>5. <a href=\"./operators.html\">Operators</a></dt><dd><dl><dt>5.1. <a href=\"./operators.html#op.casting\">Casting</a></dt><dt>5.2. <a href=\"./operators.html#op.equal\">Equality</a></dt><dt>5.3. <a href=\"./operators.html#op.over\">Contain and overlap</a></dt><dt>5.4. <a href=\"./operators.html#op.cross\">Crossing of lines</a></dt><dt>5.5. <a href=\"./operators.html#op.dist\">Distance</a></dt><dt>5.6. <a href=\"./operators.html#op.circum\">Length and circumference</a></dt><dt>5.7. <a href=\"./operators.html#op.center\">Center</a></dt><dt>5.8. <a href=\"./operators.html#op.direction\">Change the direction</a></dt><dt>5.9. <a href=\"./operators.html#op.turnline\">Turn the path of a line</a></dt><dt>5.10. <a href=\"./operators.html#op.trans\">Transformation</a></dt></dl></dd><dt>6. <a href=\"./funcs.html\">Functions</a></dt><dd><dl><dt>6.1. <a href=\"./funcs.html#func.area\">Area function</a></dt><dt>6.2. <a href=\"./funcs.html#func.spoint\"><span class=\"type\">spoint</span> functions</a></dt><dt>6.3. <a href=\"./funcs.html#funcs.strans\"><span class=\"type\">strans</span> functions</a></dt><dt>6.4. <a href=\"./funcs.html#func.circle\">scircle functions</a></dt><dt>6.5. <a href=\"./funcs.html#funcs.sellipse\"><span class=\"type\">sellipse</span> functions</a></dt><dt>6.6. <a href=\"./funcs.html#funcs.sline\"><span class=\"type\">sline</span> functions</a></dt><dt>6.7. <a href=\"./funcs.html#funcs.spath\"><span class=\"type\">spath</span> functions</a></dt><dt>6.8. <a href=\"./funcs.html#funcs.spoly\"><span class=\"type\">spoly</span> functions</a></dt><dt>6.9. <a href=\"./funcs.html#funcs.sbox\"><span class=\"type\">sbox</span> functions</a></dt></dl></dd><dt>7. <a href=\"./indices.html\">Create an index</a></dt><dd><dl><dt>7.1. <a href=\"./indices.html#ind.sphere\">Spherical index</a></dt></dl></dd><dt>8. <a href=\"./examples.html\">Usage examples</a></dt><dd><dl><dt>8.1. <a href=\"./examples.html#examp.general\">General</a></dt><dt>8.2. <a href=\"./examples.html#examp.geo\">Geographical</a></dt><dt>8.3. <a href=\"./examples.html#examp.astro\">Astronomical</a></dt></dl></dd><dt>9. <a href=\"./x1240.html\">FAQ</a></dt><dt>10. <a href=\"./appendixes.html\">Appendixes</a></dt><dd><dl><dt>10.1. <a href=\"./appendixes.html#appendixes.changelog\">Changes from version 1.0 to 1.1</a></dt></dl></dd></dl></div></div><div class=\"NAVFOOTER\"><hr align=\"LEFT\" width=\"100%\"><table summary=\"Footer navigation table\" width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td width=\"33%\" align=\"left\" valign=\"top\">&nbsp;</td><td width=\"34%\" align=\"center\" valign=\"top\">&nbsp;</td><td width=\"33%\" align=\"right\" valign=\"top\"><a href=\"./x18.html\" accesskey=\"N\">Next</a></td></tr><tr><td width=\"33%\" align=\"left\" valign=\"top\">&nbsp;</td><td width=\"34%\" align=\"center\" valign=\"top\">&nbsp;</td><td width=\"33%\" align=\"right\" valign=\"top\">What is mysql-sphere?</td></tr></tbody></table></div></body></html>\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/indices.html:\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n   ..\n   90  CLASS=\"sect2\"\n   91  >\n   92: Indices are not yet supported by mysql-sphere, since MySQL does not allow easy extension of the\n   93: indexing facility. The developer of mysql-sphere still needs to fully understand how pgSphere does\n   94  the indexing (it is not really documented) and wheather this can be implemented easily by a smart\n   95  hashing algorithm that then uses the MySQL b-tree index provided with most storage engines.\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/operators.html:\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n   ..\n  107  >&#13;                <SPAN\n  108  CLASS=\"application\"\n  109: >mysql-sphere</SPAN\n  110  > provides different casting mechanisms than possible with pgSphere. These casting \n  111  	methods have been described in the section above, however will be summarised here\n  112  	again. So, you can transform an object to another data\n  113:                 type. A cast in mysql-sphere can only be done using a <TT\n  114  CLASS=\"literal\"\n  115  >typename(x)</TT\n  ...\n  313                      </TD\n  314  ><TD\n  315: >&#13;                     	a string representation of the according mysql-sphere type\n  316                      </TD\n  317  ></TR\n  ...\n  434                  <SPAN\n  435  CLASS=\"application\"\n  436: >mysql-sphere</SPAN\n  437  > supports such\n  438                  queries using special functions returning\n  ...\n  470  ><TH\n  471  ALIGN=\"center\"\n  472: >mysql-sphere operator</TH\n  473  ><TH\n  474  ALIGN=\"center\"\n  ...\n  632                  <SPAN\n  633  CLASS=\"application\"\n  634: >mysql-sphere</SPAN\n  635  > supports only crossing of\n  636                  lines.\n  ...\n  687                  <SPAN\n  688  CLASS=\"application\"\n  689: >mysql-sphere</SPAN\n  690  > supports only distances\n  691                  between points, circles, and between point and circle. If the\n  ...\n  743                  <SPAN\n  744  CLASS=\"application\"\n  745: >mysql-sphere</SPAN\n  746  > supports only\n  747                  circumferences of circles, polygons, and boxes.  It supports\n  ...\n  823                  current implementation of <SPAN\n  824  CLASS=\"application\"\n  825: >mysql-sphere</SPAN\n  826  >,\n  827                  only centers of circles and ellipses are supported. \n  ...\n 1034                  <SPAN\n 1035  CLASS=\"application\"\n 1036: >mysql-sphere</SPAN\n 1037  >, it is done using Euler\n 1038                  transformations (<SPAN\n ....\n 1070                  <SPAN\n 1071  CLASS=\"application\"\n 1072: >mysql-sphere</SPAN\n 1073  > data type, except the\n 1074                  data type <SPAN\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/types.html:\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n   ..\n   98  >&#13;                <SPAN\n   99  CLASS=\"productname\"\n  100: >mysql-sphere</SPAN\n  101  > provides spherical data\n  102                  types for storing with\n  ...\n  105  >MySQL / MariaDB</SPAN\n  106  >. This is achieved by storing the according data types as base64 encoded binary BLOBs. This means, that\n  107: to store mysql-sphere objects, you need to store them in <TT\n  108  CLASS=\"literal\"\n  109  >BLOB</TT\n  ...\n  237  ></DIV\n  238  >\n  239: If you feel that storing mysql-sphere data types as base64 encoded BLOBs is a unnecessary overhead, you can\n  240  choose to store them in plain binary by adjusting the <TT\n  241  CLASS=\"literal\"\n  ...\n  941                Within <SPAN\n  942  CLASS=\"application\"\n  943: >mysql-sphere</SPAN\n  944  >, ellipses are\n  945                defined as :\n  ...\n 1080                        <SPAN\n 1081  CLASS=\"application\"\n 1082: >mysql-sphere</SPAN\n 1083  > as a counterclockwise\n 1084                        rotation around the ellipse center and is zero, if the\n ....\n 1159  >&#13;                Paths within <SPAN\n 1160  CLASS=\"application\"\n 1161: >mysql-sphere</SPAN\n 1162  > are simplified\n 1163                  lists of positions. The input syntax is :\n ....\n 1261                Polygons within <SPAN\n 1262  CLASS=\"application\"\n 1263: >mysql-sphere</SPAN\n 1264  > \n 1265                have the same input syntax as paths:\n ....\n 1423                    <SPAN\n 1424  CLASS=\"application\"\n 1425: >mysql-sphere</SPAN\n 1426  > swaps the edges.\n 1427                  </P\n ....\n 1433                    <SPAN\n 1434  CLASS=\"application\"\n 1435: >mysql-sphere</SPAN\n 1436  > assumes a full latitude\n 1437                    range, except that the latitudes are equal, too.\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/x18.html:\n    3  ><HEAD\n    4  ><TITLE\n    5: >&#13;            What is mysql-sphere?\n    6          </TITLE\n    7  ><META\n    .\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   15  REL=\"PREVIOUS\"\n   16  TITLE=\"\n   17:             mysql-sphere 0.1 based on pgSphere 1.2\n   18          \"\n   19  HREF=\"index.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n   ..\n   85  ><A\n   86  NAME=\"AEN18\"\n   87: >1. What is mysql-sphere?</A\n   88  ></H1\n   89  ><P\n   90  >&#13;            <SPAN\n   91  CLASS=\"application\"\n   92: >mysql-sphere</SPAN\n   93  > is an extra module for\n   94              <SPAN\n   ..\n  157  	transformed to functions.</P><P>  The aim of <SPAN\n  158  CLASS=\"application\"\n  159: >mysql-sphere</SPAN\n  160  > is to provide \n  161              uniform access to spherical data. Because\n  162              <SPAN\n  163  CLASS=\"application\"\n  164: >mysql-sphere</SPAN\n  165  > itself supports a lot of\n  166              software interfaces, you can now use the same database\n  ...\n  212  ALIGN=\"left\"\n  213  VALIGN=\"top\"\n  214: >pmysql-sphere 0.1 based on pgSphere 1.2</TD\n  215  ><TD\n  216  WIDTH=\"34%\"\n\n/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/x44.html:\n   10  REL=\"HOME\"\n   11  TITLE=\"\n   12:             mysql-sphere 0.1 based on pgSphere 1.2\n   13          \"\n   14  HREF=\"index.html\"><LINK\n   15  REL=\"PREVIOUS\"\n   16  TITLE=\"\n   17:             What is mysql-sphere?\n   18          \"\n   19  HREF=\"x18.html\"><LINK\n   ..\n   48  COLSPAN=\"3\"\n   49  ALIGN=\"center\"\n   50: >mysql-sphere 0.1 based on pgSphere 1.2</TH\n   51  ></TR\n   52  ><TR\n   ..\n   99                  <SPAN\n  100  CLASS=\"application\"\n  101: >mysql-sphere</SPAN\n  102  > is not part of the <SPAN\n  103  CLASS=\"application\"\n  ...\n  106                  You can download it from the <SPAN\n  107  CLASS=\"application\"\n  108: >mysql-sphere</SPAN\n  109  > repository\n  110                  <A\n  111: HREF=\"http://github.com/adrpar/mysql-sphere/\"\n  112  TARGET=\"_top\"\n  113  ><I\n  114  CLASS=\"citetitle\"\n  115: >http://github.com/adrpar/mysql-sphere/</I\n  116  ></A\n  117  >\n  ...\n  140              </P\n  141  ><P\n  142: >&#13;                To compile mysql-sphere, you will need the sources of your MySQL or MariaDB installation.\n  143  </p> \n  144  <p>To compile <SPAN\n  145  CLASS=\"application\"\n  146: >mysql-sphere</SPAN\n  147  > you require cmake. </P>\n  148: <p>                After you have downloaded mysql-sphere from github, you need to edit the \n  149                  (<TT\n  150  CLASS=\"filename\"\n  151: >mysql-sphere/CMakeList.txt</TT\n  152  >) configuration file. There you either let cmake try to find your MySQL installation itself or\n  153  if required you need to ajust the path to your MySQL installation by uncommenting and setting \n  ...\n  218  >\n  219  \n  220: Afterwards you can build mysql-sphere the usual way by envoking\n  221  \n  222  <TABLE\n  ...\n  252  >.\n  253  \n  254: This should have copied the mysql-sphere pluging into the according MySQL / MariaDB plugin directory. If you\n  255  you need to do so manually. The next step will register the plugin with MySQL / MariaDB. For this, you invoke\n  256  \n  ...\n  270  >\n  271  \n  272: accordingly. With this, you should be ready to go. You can check if mysql-sphere has been successfully installed\n  273  by envoking\n  274  \n  ...\n  288  >\n  289  \n  290: You should see the current mysql-sphere version on your terminal. In order to uninstall mysql-sphere you can\n  291  run the following\n  292  \n\n81 matches across 10 files\n",
			"settings":
			{
				"buffer_size": 87561,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/serialiser.cc",
			"settings":
			{
				"buffer_size": 10427,
				"line_ending": "Unix"
			}
		},
		{
			"file": "install_udfs.sql",
			"settings":
			{
				"buffer_size": 22979,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\n<HTML\n><HEAD\n><TITLE\n>&#13;            Functions\n        </TITLE\n><META\nNAME=\"GENERATOR\"\nCONTENT=\"Modular DocBook HTML Stylesheet Version 1.79\"><LINK\nREL=\"HOME\"\nTITLE=\"\n            mysql_sphere 0.1 based on pgSphere 1.2\n        \"\nHREF=\"index.html\"><LINK\nREL=\"PREVIOUS\"\nTITLE=\"\n            Operators\n        \"\nHREF=\"operators.html\"><LINK\nREL=\"NEXT\"\nTITLE=\"\n        Create an index\n      \"\nHREF=\"indices.html\"><LINK\nREL=\"STYLESHEET\"\nTYPE=\"text/css\"\nHREF=\"pg_sphere.css\"><META\nNAME=\"creation\"\nCONTENT=\"2009-07-06T05:33:03\">\n</HEAD\n><BODY\nCLASS=\"sect1\"\nBGCOLOR=\"#FFFFFF\"\nTEXT=\"#000000\"\nLINK=\"#0000FF\"\nVLINK=\"#840084\"\nALINK=\"#0000FF\"\n><DIV\nCLASS=\"NAVHEADER\"\n><TABLE\nSUMMARY=\"Header navigation table\"\nWIDTH=\"100%\"\nBORDER=\"0\"\nCELLPADDING=\"0\"\nCELLSPACING=\"0\"\n><TR\n><TH\nCOLSPAN=\"3\"\nALIGN=\"center\"\n>mysql_sphere 0.1 based on pgSphere 1.2</TH\n></TR\n><TR\n><TD\nWIDTH=\"10%\"\nALIGN=\"left\"\nVALIGN=\"bottom\"\n><A\nHREF=\"operators.html\"\nACCESSKEY=\"P\"\n>Prev</A\n></TD\n><TD\nWIDTH=\"80%\"\nALIGN=\"center\"\nVALIGN=\"bottom\"\n></TD\n><TD\nWIDTH=\"10%\"\nALIGN=\"right\"\nVALIGN=\"bottom\"\n><A\nHREF=\"indices.html\"\nACCESSKEY=\"N\"\n>Next</A\n></TD\n></TR\n></TABLE\n><HR\nALIGN=\"LEFT\"\nWIDTH=\"100%\"></DIV\n><DIV\nCLASS=\"sect1\"\n><H1\nCLASS=\"sect1\"\n><A\nNAME=\"funcs\"\n>6. Functions</A\n></H1\n><P\n>&#13;          The functions described below are implemented in pgSphere without having an\n          operator. In mysql_sphere they are equally used, but their names just differ by a\n          prepending 's' to avoid conflict with already existing functions. If you are missing some functions, see\n          <A\nHREF=\"operators.html\"\n>Section 5</A\n> and use the according operator functions.\n        </P\n>\n<DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"func.area\"\n>6.1. Area function</A\n></H2\n><P\n>&#13;              The <CODE\nCLASS=\"function\"\n>area</CODE\n> function returns the area of a\n              spherical object in square radians. Supported data types are:\n              <SPAN\nCLASS=\"type\"\n>scircle</SPAN\n>, <SPAN\nCLASS=\"type\"\n>spolygon</SPAN\n>, and\n              <SPAN\nCLASS=\"type\"\n>sbox</SPAN\n>.\n            </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN866\"\n></A\n><P\n><B\n>Example 36. Area of a spherical circle as a multiple of &#960;</B\n></P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SELECT sarea( scircle( '&#60;(0d,90d),60d&#62;' ) ) / pi() AS area;\n+--------------------+\n| area               |\n+--------------------+\n| 0.9999999999999997 |\n+--------------------+\n1 row in set (0.07 sec)\n              </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"func.area\"\n>6.1. Area function</A\n></H2\n><P\n>&#13;              The <CODE\nCLASS=\"function\"\n>area</CODE\n> function returns the area of a\n              spherical object in square radians. Supported data types are:\n              <SPAN\nCLASS=\"type\"\n>scircle</SPAN\n>, <SPAN\nCLASS=\"type\"\n>spolygon</SPAN\n>, and\n              <SPAN\nCLASS=\"type\"\n>sbox</SPAN\n>.\n            </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN866\"\n></A\n><P\n><B\n>Example 36. Area of a spherical circle as a multiple of &#960;</B\n></P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SELECT sarea( scircle( '&#60;(0d,90d),60d&#62;' ) ) / pi() AS area;\n+--------------------+\n| area               |\n+--------------------+\n| 0.9999999999999997 |\n+--------------------+\n1 row in set (0.07 sec)\n              </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"func.spoint\"\n>6.2. <SPAN\nCLASS=\"type\"\n>spoint</SPAN\n> functions</A\n></H2\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"func.spoint.ll\"\n>6.2.1. Longitude and latitude</A\n></H3\n><P\n>&#13;              The functions\n            </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN875\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>spoint_long</CODE\n>(spoint p);</CODE\n></P\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>spoint_lat</CODE\n>(spoint p);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;              returns the longitude or latitude value of a\n              spherical position <CODE\nCLASS=\"parameter\"\n>p</CODE\n> in radians.\n            </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN888\"\n></A\n><P\n><B\n>Example 37. Get the longitude and latitude of a spherical point in degrees</B\n></P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SELECT spoint_long( spoint( '(10d,20d)' ) ) * 180.0 / pi() AS longitude;\n+-----------+\n| longitude |\n+-----------+\n|        10 |\n+-----------+\n1 row in set (0.04 sec)\n\nmysql&#62; SELECT spoint_lat( spoint( '(10d,20d)' ) ) * 180.0 / pi() AS latitude;\n+----------+\n| latitude |\n+----------+\n|       20 |\n+----------+\n1 row in set (0.00 sec)\n              </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"func.spoint.cart\"\n>6.2.2. Cartesian coordinates</A\n></H3\n><P\n>&#13;              The functions\n            </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN894\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>spoint_x</CODE\n>(spoint p);</CODE\n></P\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>spoint_y</CODE\n>(spoint p);</CODE\n></P\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>spoint_z</CODE\n>(spoint p);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;              return the cartesian\n              <TT\nCLASS=\"literal\"\n>x</TT\n>, <TT\nCLASS=\"literal\"\n>y</TT\n> or\n              <TT\nCLASS=\"literal\"\n>z</TT\n> value of a spherical position\n              <CODE\nCLASS=\"parameter\"\n>p</CODE\n>. The returned values are always\n              between <TT\nCLASS=\"literal\"\n>-1.0</TT\n> and <TT\nCLASS=\"literal\"\n>+1.0</TT\n>.\n            </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN917\"\n></A\n><P\n><B\n>Example 38. \n                Get the cartesian <TT\nCLASS=\"literal\"\n>z</TT\n>-value\n                of a spherical point\n              </B\n></P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SELECT spoint_z ( spoint( '(10d,-90d)' ) ) AS z;\n+------+\n| z    |\n+------+\n|   -1 |\n+------+\n1 row in set (0.01 sec)\n              </PRE\n></TD\n></TR\n></TABLE\n></DIV\n><P\n>&#13;              The pgSphere function\n<P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>xyz</CODE\n>(spoint p);</CODE\n></P\n> cannot be ported to MySQL since a UDF function can only return one value and not as in PostgreSQL\na rowset. Therefore the equivalent mysql_sphere function does not exist.\n</DIV\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"funcs.strans\"\n>6.3. <SPAN\nCLASS=\"type\"\n>strans</SPAN\n> functions</A\n></H2\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"funcs.strans.zxz\"\n>6.3.1. Converting to ZXZ</A\n></H3\n><P\n>&#13;                    Using the function\n                    <CODE\nCLASS=\"function\"\n>strans_zxz(strans),</CODE\n> you can convert\n                    a Euler transformation to <TT\nCLASS=\"literal\"\n>ZXZ</TT\n>-axes\n                    transformation.\n                </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN940\"\n></A\n><P\n><B\n>Example 40. Change the transformation axes to <TT\nCLASS=\"literal\"\n>ZXZ</TT\n></B\n></P\n><P\n>&#13;                    Convert the transformation <TT\nCLASS=\"literal\"\n>strans '20d, -270d, 70.5d,\n                    XZY'</TT\n> to a <TT\nCLASS=\"literal\"\n>ZXZ</TT\n>-transformation.\n                  </P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SET sphere_outmode=\"DEG\";\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&#62; SELECT sstr( strans_zxz( strans( '20d, -270d, 70.5d, XZY' ) ) );\n+----------------------------------------------------------+\n| sstr( strans_zxz( strans( '20d, -270d, 70.5d, XZY' ) ) ) |\n+----------------------------------------------------------+\n| 0d, 90.5d, 90d, ZXZ                                      |\n+----------------------------------------------------------+\n1 row in set (0.03 sec)\n                  </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"funcs.strans.axes\"\n>6.3.2. Angles and axes</A\n></H3\n><P\n>&#13;                    It is possible to get the components of an Euler\n                    transformation.\n                </P\n><DIV\nCLASS=\"table\"\n><A\nNAME=\"AEN950\"\n></A\n><P\n><B\n>Table 4. Getting Euler transformation attributes</B\n></P\n><TABLE\nBORDER=\"1\"\nFRAME=\"border\"\nRULES=\"all\"\nCLASS=\"CALSTABLE\"\n><COL\nWIDTH=\"1*\"\nALIGN=\"left\"\nTITLE=\"col0\"><COL\nWIDTH=\"2*\"\nALIGN=\"left\"\nTITLE=\"col1\"><THEAD\n><TR\n><TH\n>&#13;                              function\n                          </TH\n><TH\n>&#13;                              description\n                          </TH\n></TR\n></THEAD\n><TBODY\n><TR\n><TD\n>&#13;                          <CODE\nCLASS=\"function\"\n>strans_phi</CODE\n>\n                        </TD\n><TD\n>&#13;                          first angle of a transformation\n                        </TD\n></TR\n><TR\n><TD\n>&#13;                          <CODE\nCLASS=\"function\"\n>strans_theta</CODE\n>\n                        </TD\n><TD\n>&#13;                          second angle of a transformation\n                        </TD\n></TR\n><TR\n><TD\n>&#13;                          <CODE\nCLASS=\"function\"\n>strans_psi</CODE\n>\n                        </TD\n><TD\n>&#13;                          third angle of a transformation\n                        </TD\n></TR\n><TR\n><TD\n>&#13;                          <CODE\nCLASS=\"function\"\n>strans_axes</CODE\n>\n                        </TD\n><TD\n>&#13;                          transformation axes as a three letter code\n                        </TD\n></TR\n></TBODY\n></TABLE\n></DIV\n><P\n>&#13;                    The angles will always returned as a <SPAN\nCLASS=\"type\"\n>double</SPAN\n> value in radians.\n                    The axes are returned as a three letter code.\n                </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN978\"\n></A\n><P\n><B\n>Example 41. Get the second axis and its rotation angle</B\n></P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SELECT strans_theta( strans( '20d,30d,40d,XZY' ) ) * 180 / pi() AS theta;\n+--------------------+\n| theta              |\n+--------------------+\n| 29.999999999999996 |\n+--------------------+\n1 row in set (0.01 sec)\nmysql&#62; SELECT substring( strans_axes( strans( '20d,30d,40d,XZY' ) ) from 2 for 1 ) AS axis;\n+------+\n| axis |\n+------+\n| Z    |\n+------+\n1 row in set (0.19 sec)\n                  </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"func.circle\"\n>6.4. scircle functions</A\n></H2\n><P\n>&#13;              You can get the radius of a spherical circle in radians using\n              the <CODE\nCLASS=\"function\"\n>scircle_radius</CODE\n> function.  The center of the\n              circle is available with\n              the operator fuction <TT\nCLASS=\"literal\"\n>scenter</TT\n> (<A\nHREF=\"operators.html#op.center\"\n>Section 5.7</A\n>).\n            </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN987\"\n></A\n><P\n><B\n>Example 42. Radius of a spherical circle in degrees</B\n></P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SELECT 180.0 * scircle_radius( scircle( '&#60;(0d,90d),60d&#62;' ) ) / pi() AS radius;\n+-------------------+\n| radius            |\n+-------------------+\n| 59.99999999999999 |\n+-------------------+\n1 row in set (0.09 sec)\n              </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"funcs.sellipse\"\n>6.5. <SPAN\nCLASS=\"type\"\n>sellipse</SPAN\n> functions</A\n></H2\n><P\n>&#13;              <SPAN\nCLASS=\"application\"\n>mysql_sphere</SPAN\n> provides 4 functions to get\n              the parameters of a spherical ellipse:\n            </P\n><DIV\nCLASS=\"table\"\n><A\nNAME=\"AEN995\"\n></A\n><P\n><B\n>Table 5. Getting spherical ellipse attributes</B\n></P\n><TABLE\nBORDER=\"1\"\nFRAME=\"border\"\nRULES=\"all\"\nCLASS=\"CALSTABLE\"\n><COL\nWIDTH=\"1*\"\nALIGN=\"left\"\nTITLE=\"col0\"><COL\nWIDTH=\"2*\"\nALIGN=\"left\"\nTITLE=\"col1\"><THEAD\n><TR\n><TH\n>&#13;                          function\n                      </TH\n><TH\n>&#13;                          description\n                      </TH\n></TR\n></THEAD\n><TBODY\n><TR\n><TD\n>&#13;                      <CODE\nCLASS=\"function\"\n>sellipse_lrad</CODE\n>\n                    </TD\n><TD\n>&#13;                      the major radius of the ellipse\n                    </TD\n></TR\n><TR\n><TD\n>&#13;                      <CODE\nCLASS=\"function\"\n>sellipse_srad</CODE\n>\n                    </TD\n><TD\n>&#13;                      the minor radius of the ellipse\n                    </TD\n></TR\n><TR\n><TD\n>&#13;                      <CODE\nCLASS=\"function\"\n>scenter</CODE\n>\n                    </TD\n><TD\n>&#13;                       the center of the ellipse\n                    </TD\n></TR\n><TR\n><TD\n>&#13;                      <CODE\nCLASS=\"function\"\n>sellipse_inc</CODE\n>\n                    </TD\n><TD\n>&#13;                       the inclination of the ellipse\n                    </TD\n></TR\n></TBODY\n></TABLE\n></DIV\n><P\n>&#13;                \n            </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN1025\"\n></A\n><P\n><B\n>Example 43. Get the minor radius of an ellipse</B\n></P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SELECT sellipse_srad ( sellipse( '&#60; { 10d, 5d }, ( 20d, 0d ), 90d &#62;' ) ) * 180.0/ pi() AS srad ;\n+------+\n| srad |\n+------+\n|    5 |\n+------+\n1 row in set (0.03 sec)\n              </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"funcs.sline\"\n>6.6. <SPAN\nCLASS=\"type\"\n>sline</SPAN\n> functions</A\n></H2\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"funcs.sline.be\"\n>6.6.1. Begin and end</A\n></H3\n><P\n>&#13;                To get the beginning and the end of a line,\n                <SPAN\nCLASS=\"application\"\n>mysql_sphere</SPAN\n> provides two functions:\n              </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN1035\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>sline_beg</CODE\n>(sline line);</CODE\n></P\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>sline_end</CODE\n>(sline line);</CODE\n></P\n><P\n></P\n></DIV\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN1046\"\n></A\n><P\n><B\n>Example 44. Get the beginning of a line</B\n></P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SET sphere_outmode=\"DEG\";\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&#62; SELECT sstr( sline_beg( sline( '(10d, 90d, 270d, ZXZ ), 20d' ) ) );\n+-------------------------------------------------------------+\n| sstr( sline_beg( sline( '(10d, 90d, 270d, ZXZ ), 20d' ) ) ) |\n+-------------------------------------------------------------+\n| (270d , 10d)                                                |\n+-------------------------------------------------------------+\n1 row in set (0.00 sec)\n               </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"funcs.sline.meridian\"\n>6.6.2. Create a meridian</A\n></H3\n><P\n>&#13;                  You can create a meridian as a line using the function\n                </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN1052\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>smeridian</CODE\n>(double lng);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;                  The function returns a line starting at a latitude of\n                  -90° and ending at a latitude of 90°. The line goes\n                  along the given longitude <CODE\nCLASS=\"parameter\"\n>lng</CODE\n> in\n                  radians.\n                </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN1060\"\n></A\n><P\n><B\n>Example 45. A meridian for longitude 20°</B\n></P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SET sphere_outmode=\"DEG\";\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&#62; SELECT sstr( smeridian( 20.0 *pi() / 180.0 ) );\n+-----------------------------------------+\n| sstr( smeridian( 20.0 *pi() / 180.0 ) ) |\n+-----------------------------------------+\n| ( 270d, 90d, 20d, ZXZ ), 180d           |\n+-----------------------------------------+\n1 row in set (0.01 sec)\n                  </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"funcs.spath\"\n>6.7. <SPAN\nCLASS=\"type\"\n>spath</SPAN\n> functions</A\n></H2\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"funcs.spath.npts\"\n>6.7.1. Count of points</A\n></H3\n><P\n>&#13;              You can get the count of points of a spherical path (and as well for polygons) using the\n              function:\n            </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN1069\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>snpoints</CODE\n>(spath path);</CODE\n></P\n><P\n></P\n></DIV\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN1075\"\n></A\n><P\n><B\n>Example 46. Count of spath's points</B\n></P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SELECT snpoints( spath( '{(0,0),(1,0)}' ) );\n+--------------------------------------+\n| snpoints( spath( '{(0,0),(1,0)}' ) ) |\n+--------------------------------------+\n|                                    2 |\n+--------------------------------------+\n1 row in set (0.03 sec)\n              </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"funcs.spath.pos\"\n>6.7.2. Positions at a path</A\n></H3\n><P\n>&#13;              <SPAN\nCLASS=\"application\"\n>mysql_sphere</SPAN\n> provides two functions to\n              get points at a path.\n            </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN1082\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>spoint</CODE\n>(spath path, int i);</CODE\n></P\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>spoint</CODE\n>(spath  path, double f);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;               The first function returns the <CODE\nCLASS=\"parameter\"\n>i</CODE\n>-th\n               point of a path.  If <CODE\nCLASS=\"parameter\"\n>i</CODE\n> is less than 1\n               or larger than the count of <SPAN\nCLASS=\"type\"\n>spath</SPAN\n> points, the\n               function returns <TT\nCLASS=\"literal\"\n>NULL</TT\n>.  The second\n               function does nearly the same, but does linear interpolation\n               between edge positions.\n            </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN1102\"\n></A\n><P\n><B\n>Example 47. \n                Get the &#8220;center&#8221; of a one segment <SPAN\nCLASS=\"type\"\n>spath</SPAN\n>\n              </B\n></P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SET sphere_outmode=\"DEG\";\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&#62; SELECT sstr( spoint( spath( '{(0d,0d),(30d,0d)}' ), 1.5 ) );\n+------------------------------------------------------+\n| sstr( spoint( spath( '{(0d,0d),(30d,0d)}' ), 1.5 ) ) |\n+------------------------------------------------------+\n| (15d , 0d)                                           |\n+------------------------------------------------------+\n1 row in set (0.01 sec)\n              </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"funcs.spoly\"\n>6.8. <SPAN\nCLASS=\"type\"\n>spoly</SPAN\n> functions</A\n></H2\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"funcs.spoly.npts\"\n>6.8.1. Count of edges</A\n></H3\n><P\n>&#13;              Similar to an <SPAN\nCLASS=\"type\"\n>spath</SPAN\n> (<A\nHREF=\"funcs.html#funcs.spath.npts\"\n>Section 6.7.1</A\n>), \n              you can get the count of edges of a spherical polygon using the\n              function:\n            </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN1114\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>snpoints</CODE\n>(spoly polygon);</CODE\n></P\n><P\n></P\n></DIV\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN1120\"\n></A\n><P\n><B\n>Example 48. Count of edges of a spherical polygon</B\n></P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SELECT snpoints( spoly( '{(0,0),(1,0),(1,1)}' ) );\n+--------------------------------------------+\n| snpoints( spoly( '{(0,0),(1,0),(1,1)}' ) ) |\n+--------------------------------------------+\n|                                          3 |\n+--------------------------------------------+\n1 row in set (0.00 sec)\n              </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"funcs.sbox\"\n>6.9. <SPAN\nCLASS=\"type\"\n>sbox</SPAN\n> functions</A\n></H2\n><P\n>&#13;            The functions\n          </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN1127\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>sbox_sw</CODE\n>(sbox box);</CODE\n></P\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>sbox_ne</CODE\n>(sbox box);</CODE\n></P\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>sbox_se</CODE\n>(sbox box);</CODE\n></P\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>sbox_nw</CODE\n>(sbox box);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;            return the corresponding southwest, northeast, southeast, or\n            northwest edge.\n            The returned value will be a spherical point.\n          </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN1149\"\n></A\n><P\n><B\n>Example 49. The southwest edge of a box</B\n></P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SET sphere_outmode=\"DEG\";\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&#62; SELECT sstr( sbox_sw( sbox( '( (0d,0d), (90d,0d) )' ) ) );\n+----------------------------------------------------+\n| sstr( sbox_sw( sbox( '( (0d,0d), (90d,0d) )' ) ) ) |\n+----------------------------------------------------+\n| (0d , 0d)                                          |\n+----------------------------------------------------+\n1 row in set (0.00 sec)\n            </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n></DIV\n><DIV\nCLASS=\"NAVFOOTER\"\n><HR\nALIGN=\"LEFT\"\nWIDTH=\"100%\"><TABLE\nSUMMARY=\"Footer navigation table\"\nWIDTH=\"100%\"\nBORDER=\"0\"\nCELLPADDING=\"0\"\nCELLSPACING=\"0\"\n><TR\n><TD\nWIDTH=\"33%\"\nALIGN=\"left\"\nVALIGN=\"top\"\n><A\nHREF=\"operators.html\"\nACCESSKEY=\"P\"\n>Prev</A\n></TD\n><TD\nWIDTH=\"34%\"\nALIGN=\"center\"\nVALIGN=\"top\"\n><A\nHREF=\"index.html\"\nACCESSKEY=\"H\"\n>Home</A\n></TD\n><TD\nWIDTH=\"33%\"\nALIGN=\"right\"\nVALIGN=\"top\"\n><A\nHREF=\"indices.html\"\nACCESSKEY=\"N\"\n>Next</A\n></TD\n></TR\n><TR\n><TD\nWIDTH=\"33%\"\nALIGN=\"left\"\nVALIGN=\"top\"\n>Operators</TD\n><TD\nWIDTH=\"34%\"\nALIGN=\"center\"\nVALIGN=\"top\"\n>&nbsp;</TD\n><TD\nWIDTH=\"33%\"\nALIGN=\"right\"\nVALIGN=\"top\"\n>Create an index</TD\n></TR\n></TABLE\n></DIV\n></BODY\n></HTML\n>",
			"file": "doc/funcs.html",
			"file_size": 22270,
			"file_write_time": 130337314055554322,
			"settings":
			{
				"buffer_size": 22270,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\n<HTML\n><HEAD\n><TITLE\n>&#13;        Usage examples\n      </TITLE\n><META\nNAME=\"GENERATOR\"\nCONTENT=\"Modular DocBook HTML Stylesheet Version 1.79\"><LINK\nREL=\"HOME\"\nTITLE=\"\n            mysql_sphere 0.1 based on pgSphere 1.2\n        \"\nHREF=\"index.html\"><LINK\nREL=\"PREVIOUS\"\nTITLE=\"\n        Create an index\n      \"\nHREF=\"indices.html\"><LINK\nREL=\"NEXT\"\nTITLE=\"\n            FAQ\n        \"\nHREF=\"x1240.html\"><LINK\nREL=\"STYLESHEET\"\nTYPE=\"text/css\"\nHREF=\"pg_sphere.css\"><META\nNAME=\"creation\"\nCONTENT=\"2009-07-06T05:33:03\">\n</HEAD\n><BODY\nCLASS=\"sect1\"\nBGCOLOR=\"#FFFFFF\"\nTEXT=\"#000000\"\nLINK=\"#0000FF\"\nVLINK=\"#840084\"\nALINK=\"#0000FF\"\n><DIV\nCLASS=\"NAVHEADER\"\n><TABLE\nSUMMARY=\"Header navigation table\"\nWIDTH=\"100%\"\nBORDER=\"0\"\nCELLPADDING=\"0\"\nCELLSPACING=\"0\"\n><TR\n><TH\nCOLSPAN=\"3\"\nALIGN=\"center\"\n>mysql_sphere 0.1 based on pgSphere 1.2</TH\n></TR\n><TR\n><TD\nWIDTH=\"10%\"\nALIGN=\"left\"\nVALIGN=\"bottom\"\n><A\nHREF=\"indices.html\"\nACCESSKEY=\"P\"\n>Prev</A\n></TD\n><TD\nWIDTH=\"80%\"\nALIGN=\"center\"\nVALIGN=\"bottom\"\n></TD\n><TD\nWIDTH=\"10%\"\nALIGN=\"right\"\nVALIGN=\"bottom\"\n><A\nHREF=\"x1240.html\"\nACCESSKEY=\"N\"\n>Next</A\n></TD\n></TR\n></TABLE\n><HR\nALIGN=\"LEFT\"\nWIDTH=\"100%\"></DIV\n><DIV\nCLASS=\"sect1\"\n><H1\nCLASS=\"sect1\"\n><A\nNAME=\"examples\"\n>8. Usage examples</A\n></H1\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"examp.general\"\n>8.1. General</A\n></H2\n><P\n>&#13;            tbw\n        </P\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"examp.geo\"\n>8.2. Geographical</A\n></H2\n><P\n>&#13;            tbw\n        </P\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"examp.astro\"\n>8.3. Astronomical</A\n></H2\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"AEN1204\"\n>8.3.1. Coordinates transformation</A\n></H3\n><P\n>&#13;            A commonly used task is a coordinate transformation. With the\n            parameters of a new\n            coordinate system (plane) relative to an old one,\n          </P\n><DIV\nCLASS=\"informaltable\"\n><P\n></P\n><A\nNAME=\"AEN1207\"\n></A\n><TABLE\nBORDER=\"0\"\nFRAME=\"void\"\nRULES=\"all\"\nCLASS=\"CALSTABLE\"\n><COL\nWIDTH=\"1*\"\nALIGN=\"left\"\nTITLE=\"col0\"><COL\nWIDTH=\"4*\"\nALIGN=\"left\"\nTITLE=\"col1\"><COL\nWIDTH=\"6*\"\nALIGN=\"left\"\nTITLE=\"col2\"><TBODY\n><TR\n><TD\n>&#13;                    &#937;\n                  </TD\n><TD\n>&#13;                    longitude of the ascending node\n                  </TD\n><TD\n>&#13;                    angle between line of nodes and the zero point of\n                    longitude in the old plane.\n                  </TD\n></TR\n><TR\n><TD\n>&#13;                    &#969;\n                  </TD\n><TD\n>&#13;                    argument of pericenter\n                  </TD\n><TD\n>&#13;                    the angle from the ascending node to the position in the new plane.\n                  </TD\n></TR\n><TR\n><TD\n>&#13;                    i\n                  </TD\n><TD\n>&#13;                    inclination\n                  </TD\n><TD\n>&#13;                    angle between the new plane and the old plane.\n                  </TD\n></TR\n></TBODY\n></TABLE\n><P\n></P\n></DIV\n><P\n>&#13;            you can do a transformation of an object\n            <CODE\nCLASS=\"parameter\"\n>object</CODE\n> from an old into a new coordinate\n            system using:\n          </P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"synopsis\"\n> sinverse( object, strans( '&#969;, i, &#937;' ) )</PRE\n></TD\n></TR\n></TABLE\n><P\n>or</P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"synopsis\"\n> sinverse( object, strans(&#969;, i, &#937;) )</PRE\n></TD\n></TR\n></TABLE\n><P\n>&#13;            Otherwise, for a transformation of an object\n            <CODE\nCLASS=\"parameter\"\n>object</CODE\n> from the new into the old\n            coordinate system, use the operator <TT\nCLASS=\"literal\"\n>+</TT\n>:\n          </P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"synopsis\"\n> stransform( object, strans( '&#969;, i, &#937;' ) )</PRE\n></TD\n></TR\n></TABLE\n><P\n>or</P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"synopsis\"\n> stransform( object, strans(&#969;, i, &#937;) )</PRE\n></TD\n></TR\n></TABLE\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN1236\"\n></A\n><P\n><B\n>Example 51. Perihel and aphel coordinates of a comet orbit</B\n></P\n><P\n>&#13;             We are assuming the orbital elements of a comet are\n             &#937;=30°, i=60° and &#969;=90°. We get the\n             spherical position of perihel and aphel with:\n            </P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SET sphere_outmode=\"DEG\";\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&#62; SELECT sstr( stransform( spoint( '(0,0)' ), strans( '90d,60d,30d' ) ) ) AS perihel;\n+--------------+\n| perihel      |\n+--------------+\n| (120d , 60d) |\n+--------------+\n1 row in set (0.01 sec)\n\nmysql&#62; SELECT sstr( stransform( spoint( '(180d,0)' ), strans( '90d,60d,30d' ) ) ) AS aphel;\n+---------------+\n| aphel         |\n+---------------+\n| (300d , -60d) |\n+---------------+\n1 row in set (0.01 sec)\n            </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n></DIV\n></DIV\n><DIV\nCLASS=\"NAVFOOTER\"\n><HR\nALIGN=\"LEFT\"\nWIDTH=\"100%\"><TABLE\nSUMMARY=\"Footer navigation table\"\nWIDTH=\"100%\"\nBORDER=\"0\"\nCELLPADDING=\"0\"\nCELLSPACING=\"0\"\n><TR\n><TD\nWIDTH=\"33%\"\nALIGN=\"left\"\nVALIGN=\"top\"\n><A\nHREF=\"indices.html\"\nACCESSKEY=\"P\"\n>Prev</A\n></TD\n><TD\nWIDTH=\"34%\"\nALIGN=\"center\"\nVALIGN=\"top\"\n><A\nHREF=\"index.html\"\nACCESSKEY=\"H\"\n>Home</A\n></TD\n><TD\nWIDTH=\"33%\"\nALIGN=\"right\"\nVALIGN=\"top\"\n><A\nHREF=\"x1240.html\"\nACCESSKEY=\"N\"\n>Next</A\n></TD\n></TR\n><TR\n><TD\nWIDTH=\"33%\"\nALIGN=\"left\"\nVALIGN=\"top\"\n>Create an index</TD\n><TD\nWIDTH=\"34%\"\nALIGN=\"center\"\nVALIGN=\"top\"\n>&nbsp;</TD\n><TD\nWIDTH=\"33%\"\nALIGN=\"right\"\nVALIGN=\"top\"\n>FAQ</TD\n></TR\n></TABLE\n></DIV\n></BODY\n></HTML\n>",
			"file": "doc/examples.html",
			"file_size": 5817,
			"file_write_time": 130337314156676126,
			"settings":
			{
				"buffer_size": 5817,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\n<HTML\n><HEAD\n><TITLE\n>&#13;            Constructors\n        </TITLE\n><META\nNAME=\"GENERATOR\"\nCONTENT=\"Modular DocBook HTML Stylesheet Version 1.79\"><LINK\nREL=\"HOME\"\nTITLE=\"\n            mysql_sphere 0.1 based on pgSphere 1.2\n        \"\nHREF=\"index.html\"><LINK\nREL=\"PREVIOUS\"\nTITLE=\"\n            Data types\n        \"\nHREF=\"types.html\"><LINK\nREL=\"NEXT\"\nTITLE=\"\n            Operators\n        \"\nHREF=\"operators.html\"><LINK\nREL=\"STYLESHEET\"\nTYPE=\"text/css\"\nHREF=\"pg_sphere.css\"><META\nNAME=\"creation\"\nCONTENT=\"2009-07-06T05:33:03\">\n</HEAD\n><BODY\nCLASS=\"sect1\"\nBGCOLOR=\"#FFFFFF\"\nTEXT=\"#000000\"\nLINK=\"#0000FF\"\nVLINK=\"#840084\"\nALINK=\"#0000FF\"\n><DIV\nCLASS=\"NAVHEADER\"\n><TABLE\nSUMMARY=\"Header navigation table\"\nWIDTH=\"100%\"\nBORDER=\"0\"\nCELLPADDING=\"0\"\nCELLSPACING=\"0\"\n><TR\n><TH\nCOLSPAN=\"3\"\nALIGN=\"center\"\n>mysql_sphere 0.1 based on pgSphere 1.2</TH\n></TR\n><TR\n><TD\nWIDTH=\"10%\"\nALIGN=\"left\"\nVALIGN=\"bottom\"\n><A\nHREF=\"types.html\"\nACCESSKEY=\"P\"\n>Prev</A\n></TD\n><TD\nWIDTH=\"80%\"\nALIGN=\"center\"\nVALIGN=\"bottom\"\n></TD\n><TD\nWIDTH=\"10%\"\nALIGN=\"right\"\nVALIGN=\"bottom\"\n><A\nHREF=\"operators.html\"\nACCESSKEY=\"N\"\n>Next</A\n></TD\n></TR\n></TABLE\n><HR\nALIGN=\"LEFT\"\nWIDTH=\"100%\"></DIV\n><DIV\nCLASS=\"sect1\"\n><H1\nCLASS=\"sect1\"\n><A\nNAME=\"construct\"\n>4. Constructors</A\n></H1\n><P\n>&#13;          Constructors within <SPAN\nCLASS=\"application\"\n>mysql_sphere</SPAN\n> are in no way different to defining mysql_sphere objects, just with other\n  options. They are in a way overloaded construction functions from the previous\n  chapter. In pgSphere a distinction between type definition and construction was\n  made, mainly due to the capabilities of PostgreSQL. In mysql_sphere this is not\n  needed anymore and the following sections describe\n          functions needed to create spherical data types from other data\n          types. \n            <SPAN\nCLASS=\"application\"\n>mysql_sphere</SPAN\n> constructor\n          functions are named by returned data type. Constructor functions\n          expecting one parameter only are implemented as <A\nHREF=\"operators.html#op.casting\"\n>casting functions, a distinction necessary in PostgreSQL</A\n>. These casting functions will only be mentioned here and no example is given.\n        </P\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"contr.spoint\"\n>4.1. Point</A\n></H2\n><P\n>&#13;            There are two constructor function for spherical points.\n          </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN438\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>spoint</CODE\n>(double lng, double lat);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;            where <CODE\nCLASS=\"parameter\"\n>lng</CODE\n> is the longitude of the spherical\n            point in radians, <CODE\nCLASS=\"parameter\"\n>lng</CODE\n> is the latitude of\n            the spherical point in radians.\n          </P\n>\n<P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>spoint</CODE\n>(spath path, int i);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;            returning the i-th point in a path where <CODE\nCLASS=\"parameter\"\n>path</CODE\n> is a mysql_sphere path binary BLOB, <CODE\nCLASS=\"parameter\"\n>i</CODE\n> is the i-th point in the path\n          </P\n>\n<DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN449\"\n></A\n><P\n><B\n>Example 14. A spherical point from longitude and latitude</B\n></P\n><P\n>&#13;              Get a spherical position with 270° of longitude and\n              -30° of latitude.\n            </P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SELECT spoint( 270.0*pi()/180.0,-30.0*pi()/180.0 );\n+---------------------------------------------+\n| spoint( 270.0*pi()/180.0,-30.0*pi()/180.0 ) |\n+---------------------------------------------+\n| PHB0PtIhM3982RJAaHMtOFLB4L88dHA+AA==        |\n+---------------------------------------------+\n1 row in set (0.05 sec)\n            </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"contr.strans\"\n>4.2. Euler transformation</A\n></H2\n><P\n>&#13;            There are two constructor functions for a Euler transformation:\n          </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN456\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>strans</CODE\n>(double phi, double theta, double psi);</CODE\n></P\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>strans</CODE\n>(double phi, double theta, double psi, character axis);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;            where <CODE\nCLASS=\"parameter\"\n>phi</CODE\n>, <CODE\nCLASS=\"parameter\"\n>theta</CODE\n> and\n            <CODE\nCLASS=\"parameter\"\n>psi</CODE\n> are the three angles of <A\nHREF=\"types.html#dt.strans\"\n>&#13;            Euler transformation</A\n>. The fourth parameter is the three letter code\n            of Euler the transformation axis. If that parameter is omitted,\n            <SPAN\nCLASS=\"application\"\n>mysql_sphere</SPAN\n> will assume <TT\nCLASS=\"literal\"\n>ZXZ</TT\n>.\n            For more information about that parameter, see <A\nHREF=\"types.html#dt.strans\"\n>Section 3.3</A\n>.\n          </P\n><P>\nFurther casting constructors are:\n<DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN456\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>strans</CODE\n>(sline line);</CODE\n></P\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>strans</CODE\n>(sellipse ellipse);</CODE\n></P\n><P\n></P\n></DIV\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN485\"\n></A\n><P\n><B\n>Example 15. Create a Euler transformation object</B\n></P\n><P\n>&#13;              Create a transformation object to rotate a spherical object\n              counterclockwise, first 20° around\n              the <TT\nCLASS=\"literal\"\n>x</TT\n>-axis, second -270° around\n              the <TT\nCLASS=\"literal\"\n>z</TT\n>-axis, and last 70.5° around\n              the <TT\nCLASS=\"literal\"\n>y</TT\n>-axis.\n            </P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SELECT strans ( 20.0*pi()/180.0, -270.0*pi()/180.0, 70.5*pi()/180.0, 'XZY');\n+----------------------------------------------------------------------+\n| strans ( 20.0*pi()/180.0, -270.0*pi()/180.0, 70.5*pi()/180.0, 'XZY') |\n+----------------------------------------------------------------------+\n| PGV0Pi0AAAAAAAAAh0TnShhX1j8YLURU+yH5PzABz87zr/M/PHRlPgA=             |\n+----------------------------------------------------------------------+\n1 row in set (0.01 sec)\n            </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"contr.scircle\"\n>4.3. Circle</A\n></H2\n><P\n>&#13;            The function\n          </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN495\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>scircle</CODE\n>(spoint center, double radius);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;            returns a spherical circle with center at\n            <CODE\nCLASS=\"parameter\"\n>center</CODE\n> and a radius\n            <CODE\nCLASS=\"parameter\"\n>radius</CODE\n> in radians.  The circle radius has\n            to be larger than or equal to zero but less or equal to 90°. \n            Otherwise, this function returns an error.\nFurther casting constructors are:\n<DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN456\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>scircle</CODE\n>(spoint point);</CODE\n></P\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>scircle</CODE\n>(sellipse ellipse);</CODE\n></P\n><P\n></P\n></DIV\n>\n\n          </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN506\"\n></A\n><P\n><B\n>Example 16. A circle around the Noth Pole</B\n></P\n><P\n>&#13;             Get a spherical circle around the North Pole with a radius\n             of 30° ( <TT\nCLASS=\"literal\"\n>sstr</TT\n> casts a given mysql_sphere data type to a readable string).\n            </P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SET sphere_outmode=\"DEG\";\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&#62; SELECT scircle ( spoint( '(0d,90d)' ), 30.0*pi()/180.0 );\n+---------------------------------------------------+\n| scircle ( spoint( '(0d,90d)' ), 30.0*pi()/180.0 ) |\n+---------------------------------------------------+\n| PGNsPgAAAAAAAAAAGC1EVPsh+T9lcy04UsHgPzxsYz4A      |\n+---------------------------------------------------+\n1 row in set (0.01 sec)\n\nmysql&#62; SELECT sstr( scircle ( spoint( '(0d,90d)' ), 30.0*pi()/180.0 ) );\n+-----------------------------------------------------------+\n| sstr( scircle ( spoint( '(0d,90d)' ), 30.0*pi()/180.0 ) ) |\n+-----------------------------------------------------------+\n| <(0d , 90d) , 30d>                                        |\n+-----------------------------------------------------------+\n1 row in set (0.02 sec)\n\n           </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"contr.sline\"\n>4.4. Line</A\n></H2\n><P\n>&#13;            The input of spherical lines using Euler transformation and\n            length is quite circumstantial (see <A\nHREF=\"types.html#dt.sline\"\n>Section 3.5</A\n>). \n            For short lines it is easier to input a line specifying the\n            begining and the end of the line.\n          </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN514\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>sline</CODE\n>(spoint begin, spoint end);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;            If the distance between <CODE\nCLASS=\"parameter\"\n>begin</CODE\n> and\n            <CODE\nCLASS=\"parameter\"\n>end</CODE\n> is 180° (&#960;), this function\n            returns an error because the location of the line is undefined. \n            However, if longitudes of <CODE\nCLASS=\"parameter\"\n>begin</CODE\n> and\n            <CODE\nCLASS=\"parameter\"\n>end</CODE\n> are equal,\n            <SPAN\nCLASS=\"application\"\n>pgSphere</SPAN\n> assumes a meridian and\n            returns the corresponding spherical line.\n          </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"const.line.1\"\n></A\n><P\n><B\n>Example 17. A line created using begin and end of line</B\n></P\n><P\n>&#13;              A line starting at <TT\nCLASS=\"literal\"\n>spoint '(270d,10d)'</TT\n> and\n              ending at <TT\nCLASS=\"literal\"\n>spoint '(270d,30d)'</TT\n> ( <TT\nCLASS=\"literal\"\n>sstr</TT\n> casts a given mysql_sphere data type to a readable string):\n            </P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SET sphere_outmode=\"DEG\";\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&#62; SELECT sline( spoint( '(270d,10d)' ), spoint( '(270d,30d)') );\n+-----------------------------------------------------------+\n| sline( spoint( '(270d,10d)' ), spoint( '(270d,30d)') )    |\n+-----------------------------------------------------------+\n| PGxpPodE50oYV8Y/GC1EVPsh+T/SITN/fNkSQIVE50oYV9Y/PGlsPgA=  |\n+-----------------------------------------------------------+\n1 row in set (0.01 sec)\n\nmysql&#62; SELECT sstr( sline( spoint( '(270d,10d)' ), spoint( '(270d,30d)') ) );\n+----------------------------------------------------------------+\n| sstr( sline( spoint( '(270d,10d)' ), spoint( '(270d,30d)') ) ) |\n+----------------------------------------------------------------+\n| ( 10d, 90d, 270d, ZXZ ), 20d                                   |\n+----------------------------------------------------------------+\n1 row in set (0.01 sec)\n            </PRE\n></TD\n></TR\n></TABLE\n></DIV\n><P\n>&#13;            Furthermore, there is a function for inputing a line\n            using Euler transformation <CODE\nCLASS=\"parameter\"\n>trans</CODE\n>\n            and line length <CODE\nCLASS=\"parameter\"\n>length</CODE\n>\n          </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN537\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>sline</CODE\n>(strans trans, double length);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;            where the line length <CODE\nCLASS=\"parameter\"\n>length</CODE\n> must be\n            given in radians.\n          </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN547\"\n></A\n><P\n><B\n>Example 18. A line created with its transformation and length</B\n></P\n><P\n>&#13;              The same line as in <A\nHREF=\"construct.html#const.line.1\"\n>Example 17</A\n>, but using\n              transformation and line length.\n            </P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SELECT sstr( sline ( strans( '10d, 90d, 270d, ZXZ' ), 20.0*pi()/180.0 ) );\n+--------------------------------------------------------------------+\n| sstr( sline ( strans( '10d, 90d, 270d, ZXZ' ), 20.0*pi()/180.0 ) ) |\n+--------------------------------------------------------------------+\n| ( 10d, 90d, 270d, ZXZ ), 20d                                       |\n+--------------------------------------------------------------------+\n1 row in set (0.01 sec)\n            </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n>\n\nFurther casting constructors are:\n<DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN456\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>sline</CODE\n>(spoint point);</CODE\n></P\n><P\n></P\n></DIV\n>\n\n<DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"contr.sellipse\"\n>4.5. Ellipse</A\n></H2\n><P\n>&#13;            You can use the function\n          </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN555\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>sellipse</CODE\n>(spoint center, double major_rad, double minor_rad, double incl);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;            to create a spherical ellipse. The first parameter\n            <CODE\nCLASS=\"parameter\"\n>center</CODE\n> is the center of ellipse.  The\n            parameter <CODE\nCLASS=\"parameter\"\n>major_rad</CODE\n> and\n            <CODE\nCLASS=\"parameter\"\n>minor_rad</CODE\n> are the major and the minor\n            radii of the ellipse in radians. If the major radius is smaller\n            than minor radius, <SPAN\nCLASS=\"application\"\n>pgSphere</SPAN\n> swaps the\n            values automatically.  The last parameter\n            <CODE\nCLASS=\"parameter\"\n>incl</CODE\n> is the inclination angle in radians. \n            For more informations about ellipses, see <A\nHREF=\"types.html#dt.sellipse\"\n>Section 3.6</A\n>.\n          </P\n>\n\nFurther casting constructors are:\n<DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN456\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>sellipse</CODE\n>(spoint point);</CODE\n></P\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>sellipse</CODE\n>(scirlce circle);</CODE\n></P\n><P\n></P\n></DIV\n>\n\n<DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN574\"\n></A\n><P\n><B\n>Example 19. Create an ellipse</B\n></P\n><P\n>&#13;              An ellipse with a center at 20° of longitude and 0°\n              of latitude. The minor radius is part of the equator. The major\n              radius has a size of 10°. The minor radius has 5° ( <TT\nCLASS=\"literal\"\n>sstr</TT\n> casts a given mysql_sphere data type to a readable string).\n            </P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SET sphere_outmode=\"DEG\";\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&#62; SELECT sellipse ( spoint( '( 20d, 0d )' ), 10.0*pi()/180.0, 5.0*pi()/180.0, pi()/2.0 );\n+---------------------------------------------------------------------------------+\n| sellipse ( spoint( '( 20d, 0d )' ), 10.0*pi()/180.0, 5.0*pi()/180.0, pi()/2.0 ) |\n+---------------------------------------------------------------------------------+\n| PGVsPodE50oYV8Y/h0TnShhXtj8YLURU+yH5PwAAAAAAAAAAh0TnShhX1j88bGU+AA==            |\n+---------------------------------------------------------------------------------+\n1 row in set (0.01 sec)\n\nmysql&#62; SELECT sstr( sellipse ( spoint( '( 20d, 0d )' ), 10.0*pi()/180.0, 5.0*pi()/180.0, pi()/2.0 ) );\n+-----------------------------------------------------------------------------------------+\n| sstr( sellipse ( spoint( '( 20d, 0d )' ), 10.0*pi()/180.0, 5.0*pi()/180.0, pi()/2.0 ) ) |\n+-----------------------------------------------------------------------------------------+\n| <{ 10d , 5d }, (20d , -0d) , 90d>                                                       |\n+-----------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n            </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"contr.spoly\"\n>4.6. Polygon</A\n></H2\n><P\n>&#13;            The aggregate function\n          </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN581\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>spoly_aggr</CODE\n>(spoint edge);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;            can be used to create a polygon from a set of spherical points.\n            There are the same restrictions as for using the input function of\n            spherical polygon (see <A\nHREF=\"types.html#dt.spoly\"\n>Section 3.8</A\n>). The function\n            returns\n            <TT\nCLASS=\"literal\"\n>NULL</TT\n>, if the polygon couldn't be created.\n          </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN590\"\n></A\n><P\n><B\n>Example 20. \n              Create a spherical polygon using a set of spherical points\n            </B\n></P\n><P\n>&#13;              Create a table and put in some spherical points with a\n              unique ID.  Then, create two polygons with different edge\n              sequences ( <TT\nCLASS=\"literal\"\n>sstr</TT\n> casts a given mysql_sphere data type to a readable string).\n            </P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SET sphere_outmode=\"DEG\";\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&#62; CREATE TABLE points ( i int PRIMARY KEY, p BLOB );\nmysql&#62; INSERT INTO points VALUES (1, spoint( '( 0d, 0d)' ) );\nmysql&#62; INSERT INTO points VALUES (2, spoint( '(10d, 0d)') );\nmysql&#62; INSERT INTO points VALUES (3, spoint( '( 0d,10d)') );\nmysql&#62; SELECT spoly_aggr(data.p) FROM ( SELECT p FROM points ORDER BY i ASC ) AS data ;\n+--------------------------------------------------------------------------------------------------------+\n| spoly_aggr(data.p)                                                                                     |\n+--------------------------------------------------------------------------------------------------------+\n| PHBnPkAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAh0TnShhXxj8AAAAAAAAAAAAAAAAA\nAAAAh0TnShhXxj88Z3A+AA==  |\n+--------------------------------------------------------------------------------------------------------+\n1 row in set (0.28 sec)\n\nmysql&#62; SELECT sstr( spoly_aggr(data.p) ) FROM ( SELECT p FROM points ORDER BY i ASC ) AS data ;\n+-----------------------------------+\n| sstr( spoly_aggr(data.p) )        |\n+-----------------------------------+\n| {(0d , 0d),(10d , 0d),(0d , 10d)} |\n+-----------------------------------+\n1 row in set (0.03 sec)\n\nsql&#62; SELECT sstr( spoly_aggr(data.p) ) FROM ( SELECT p FROM points ORDER BY i DESC ) AS data ;\n+-----------------------------------+\n| sstr( spoly_aggr(data.p) )        |\n+-----------------------------------+\n| {(0d , 10d),(10d , 0d),(0d , 0d)} |\n+-----------------------------------+\n1 row in set (0.02 sec)\n            </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"contr.spath\"\n>4.7. Path</A\n></H2\n><P\n>&#13;            Similar to spherical polygons, you can use the aggregate function\n          </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN597\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>spath_aggr</CODE\n>(spoint edge);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;            to create a spherical path using a set of spherical points.\n            There are the same restrictions as with the input function of\n            spherical path (see <A\nHREF=\"types.html#dt.spath\"\n>Section 3.7</A\n>). The function returns\n            <TT\nCLASS=\"literal\"\n>NULL</TT\n> if the path couldn't be created.\n          </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN606\"\n></A\n><P\n><B\n>Example 21. \n              Create a spherical path using a set of spherical points\n            </B\n></P\n><P\n>&#13;              Create a table and put in some spherical points with a\n              unique ID.  Then, create a spherical path from it ( <TT\nCLASS=\"literal\"\n>sstr</TT\n> casts a given mysql_sphere data type to a readable string).\n            </P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SET sphere_outmode=\"DEG\";\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&#62; CREATE TABLE points ( i int PRIMARY KEY, p BLOB );\nmysql&#62; INSERT INTO points VALUES (1, spoint( '( 0d, 10d)') );\nmysql&#62; INSERT INTO points VALUES (2, spoint( '( 0d,  0d)') );\nmysql&#62; INSERT INTO points VALUES (3, spoint( '( 0d,-10d)') );\nmysql&#62; SELECT spath_aggr(data.p) FROM ( SELECT p FROM points ORDER BY i ASC ) AS data ;\n+--------------------------------------------------------------------------------------------------------+\n| spath_aggr(data.p)                                                                                     |\n+--------------------------------------------------------------------------------------------------------+\n| PHBhPkAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAIdE50oYV8Y/AAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAgETnShhXxr88YXA+AA==  |\n+--------------------------------------------------------------------------------------------------------+\n1 row in set (0.02 sec)\n\nmysql&#62; SELECT sstr( spath_aggr(data.p) ) FROM ( SELECT p FROM points ORDER BY i ASC ) AS data ;\n+------------------------------------+\n| sstr( spath_aggr(data.p) )         |\n+------------------------------------+\n| {(0d , 10d),(0d , 0d),(0d , -10d)} |\n+------------------------------------+\n1 row in set (0.00 sec)\n\nmysql&#62; SELECT sstr( spath_aggr(data.p) ) FROM ( SELECT p FROM points ORDER BY i DESC ) AS data ;\n+------------------------------------+\n| sstr( spath_aggr(data.p) )         |\n+------------------------------------+\n| {(0d , -10d),(0d , 0d),(0d , 10d)} |\n+------------------------------------+\n1 row in set (0.01 sec)\n            </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"contr.sbox\"\n>4.8. Coordinates range</A\n></H2\n><P\n>&#13;            The function\n          </P\n><DIV\nCLASS=\"funcsynopsis\"\n><P\n></P\n><A\nNAME=\"AEN613\"\n></A\n><P\n><CODE\n><CODE\nCLASS=\"FUNCDEF\"\n>sbox</CODE\n>(spoint south_west, spoint north_east);</CODE\n></P\n><P\n></P\n></DIV\n><P\n>&#13;            creates an <SPAN\nCLASS=\"type\"\n>sbox</SPAN\n> object with its first parameter\n            <CODE\nCLASS=\"parameter\"\n>south_west</CODE\n> as the southwest edge and its\n            second parameter <CODE\nCLASS=\"parameter\"\n>northeast</CODE\n> as the\n            north-east edge of the coordinates range.\n          </P\n><DIV\nCLASS=\"example\"\n><A\nNAME=\"AEN625\"\n></A\n><P\n><B\n>Example 22. Create a spherical box using edges</B\n></P\n><P\n>&#13;              A coordinate range between 0° and +10° in latitude and\n              longitude.\n            </P\n><TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"programlisting\"\n>&#13;mysql&#62; SELECT sbox( spoint( '(0d,0d)' ), spoint( '(10d,10d)' ) );\n+-----------------------------------------------------------+\n| sbox( spoint( '(0d,0d)' ), spoint( '(10d,10d)' ) )        |\n+-----------------------------------------------------------+\n| PGJ4PgAAAAAAAAAAAAAAAAAAAACHROdKGFfGP4dE50oYV8Y/PHhiPgA=  |\n+-----------------------------------------------------------+\n1 row in set (0.01 sec)\n            </PRE\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n></DIV\n><DIV\nCLASS=\"NAVFOOTER\"\n><HR\nALIGN=\"LEFT\"\nWIDTH=\"100%\"><TABLE\nSUMMARY=\"Footer navigation table\"\nWIDTH=\"100%\"\nBORDER=\"0\"\nCELLPADDING=\"0\"\nCELLSPACING=\"0\"\n><TR\n><TD\nWIDTH=\"33%\"\nALIGN=\"left\"\nVALIGN=\"top\"\n><A\nHREF=\"types.html\"\nACCESSKEY=\"P\"\n>Prev</A\n></TD\n><TD\nWIDTH=\"34%\"\nALIGN=\"center\"\nVALIGN=\"top\"\n><A\nHREF=\"index.html\"\nACCESSKEY=\"H\"\n>Home</A\n></TD\n><TD\nWIDTH=\"33%\"\nALIGN=\"right\"\nVALIGN=\"top\"\n><A\nHREF=\"operators.html\"\nACCESSKEY=\"N\"\n>Next</A\n></TD\n></TR\n><TR\n><TD\nWIDTH=\"33%\"\nALIGN=\"left\"\nVALIGN=\"top\"\n>Data types</TD\n><TD\nWIDTH=\"34%\"\nALIGN=\"center\"\nVALIGN=\"top\"\n>&nbsp;</TD\n><TD\nWIDTH=\"33%\"\nALIGN=\"right\"\nVALIGN=\"top\"\n>Operators</TD\n></TR\n></TABLE\n></DIV\n></BODY\n></HTML\n>",
			"file": "doc/construct.html",
			"file_size": 23778,
			"file_write_time": 130337314222917307,
			"settings":
			{
				"buffer_size": 23778,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\n<HTML\n><HEAD\n><TITLE\n>&#13;        Appendixes\n      </TITLE\n><META\nNAME=\"GENERATOR\"\nCONTENT=\"Modular DocBook HTML Stylesheet Version 1.79\"><LINK\nREL=\"HOME\"\nTITLE=\"\n            pgSphere 1.1\n        \"\nHREF=\"index.html\"><LINK\nREL=\"PREVIOUS\"\nTITLE=\"\n            FAQ\n        \"\nHREF=\"x1240.html\"><LINK\nREL=\"STYLESHEET\"\nTYPE=\"text/css\"\nHREF=\"pg_sphere.css\"><META\nNAME=\"creation\"\nCONTENT=\"2009-07-06T05:33:03\">\n</HEAD\n><BODY\nCLASS=\"sect1\"\nBGCOLOR=\"#FFFFFF\"\nTEXT=\"#000000\"\nLINK=\"#0000FF\"\nVLINK=\"#840084\"\nALINK=\"#0000FF\"\n><DIV\nCLASS=\"NAVHEADER\"\n><TABLE\nSUMMARY=\"Header navigation table\"\nWIDTH=\"100%\"\nBORDER=\"0\"\nCELLPADDING=\"0\"\nCELLSPACING=\"0\"\n><TR\n><TH\nCOLSPAN=\"3\"\nALIGN=\"center\"\n>pgSphere 1.1</TH\n></TR\n><TR\n><TD\nWIDTH=\"10%\"\nALIGN=\"left\"\nVALIGN=\"bottom\"\n><A\nHREF=\"x1240.html\"\nACCESSKEY=\"P\"\n>Prev</A\n></TD\n><TD\nWIDTH=\"80%\"\nALIGN=\"center\"\nVALIGN=\"bottom\"\n></TD\n><TD\nWIDTH=\"10%\"\nALIGN=\"right\"\nVALIGN=\"bottom\"\n>&nbsp;</TD\n></TR\n></TABLE\n><HR\nALIGN=\"LEFT\"\nWIDTH=\"100%\"></DIV\n><DIV\nCLASS=\"sect1\"\n><H1\nCLASS=\"sect1\"\n><A\nNAME=\"appendixes\"\n>10. Appendixes</A\n></H1\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"appendixes.changelog\"\n>10.1. First release candidate of the pgSphere port mysql_sphere 0.1</A\n></H2\n><P\n></P\n><UL\n><LI\n><P\n>&#13;              Initial port without indexing facility. Required changed to function names and \n					mapping of PostgreSQL operator to functions. See the documentation for details.\n            </P\n></LI\n></UL\n></DIV\n></DIV\n><DIV\nCLASS=\"NAVFOOTER\"\n><HR\nALIGN=\"LEFT\"\nWIDTH=\"100%\"><TABLE\nSUMMARY=\"Footer navigation table\"\nWIDTH=\"100%\"\nBORDER=\"0\"\nCELLPADDING=\"0\"\nCELLSPACING=\"0\"\n><TR\n><TD\nWIDTH=\"33%\"\nALIGN=\"left\"\nVALIGN=\"top\"\n><A\nHREF=\"x1240.html\"\nACCESSKEY=\"P\"\n>Prev</A\n></TD\n><TD\nWIDTH=\"34%\"\nALIGN=\"center\"\nVALIGN=\"top\"\n><A\nHREF=\"index.html\"\nACCESSKEY=\"H\"\n>Home</A\n></TD\n><TD\nWIDTH=\"33%\"\nALIGN=\"right\"\nVALIGN=\"top\"\n>&nbsp;</TD\n></TR\n><TR\n><TD\nWIDTH=\"33%\"\nALIGN=\"left\"\nVALIGN=\"top\"\n>FAQ</TD\n><TD\nWIDTH=\"34%\"\nALIGN=\"center\"\nVALIGN=\"top\"\n>&nbsp;</TD\n><TD\nWIDTH=\"33%\"\nALIGN=\"right\"\nVALIGN=\"top\"\n>&nbsp;</TD\n></TR\n></TABLE\n></DIV\n></BODY\n></HTML\n>",
			"file": "doc/appendixes.html",
			"file_size": 2166,
			"file_write_time": 130337314288158470,
			"settings":
			{
				"buffer_size": 2166,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README",
			"settings":
			{
				"buffer_size": 1656,
				"line_ending": "Unix"
			}
		},
		{
			"file": "doc/x18.html",
			"settings":
			{
				"buffer_size": 4200,
				"line_ending": "Unix"
			}
		},
		{
			"file": "doc/x44.html",
			"settings":
			{
				"buffer_size": 6153,
				"line_ending": "Unix"
			}
		},
		{
			"file": "doc/x1240.html",
			"settings":
			{
				"buffer_size": 1992,
				"line_ending": "Unix"
			}
		},
		{
			"file": "doc/types.html",
			"settings":
			{
				"buffer_size": 29091,
				"line_ending": "Unix"
			}
		},
		{
			"file": "doc/operators.html",
			"settings":
			{
				"buffer_size": 22357,
				"line_ending": "Unix"
			}
		},
		{
			"file": "doc/indices.html",
			"settings":
			{
				"buffer_size": 2420,
				"line_ending": "Unix"
			}
		},
		{
			"file": "doc/index.html",
			"settings":
			{
				"buffer_size": 6460,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/udf_sphere_box.cc",
			"settings":
			{
				"buffer_size": 67857,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"tab",
				"Indentation: Convert to Tabs"
			],
			[
				"tabs",
				"Indentation: Convert to Tabs"
			],
			[
				"format",
				"Format Code"
			],
			[
				"Tab",
				"Indentation: Convert to Tabs"
			],
			[
				"comm",
				"Toggle Comment"
			],
			[
				"Tabs",
				"View: Toggle Tabs"
			],
			[
				"ta",
				"Indentation: Convert to Tabs"
			],
			[
				"comment",
				"Toggle Comment"
			],
			[
				"Package",
				"Package Control: Upgrade Package"
			],
			[
				"package",
				"Package Control: Upgrade Package"
			],
			[
				"packa",
				"Package Control: Upgrade Package"
			],
			[
				"inden",
				"Indentation: Convert to Tabs"
			],
			[
				"inde",
				"Indentation: Convert to Tabs"
			],
			[
				"in",
				"Indentation: Convert to Tabs"
			],
			[
				"Packa",
				"Package Control: Upgrade Package"
			],
			[
				"Pack",
				"Package Control: Discover Packages"
			],
			[
				"diff",
				"Set Syntax: Diff"
			],
			[
				"Pac",
				"Package Control: Upgrade Package"
			],
			[
				"pack",
				"Package Control: Upgrade Package"
			],
			[
				"for",
				"Format: Php"
			],
			[
				"Pcak",
				"Package Control: Upgrade Package"
			],
			[
				"Pacak",
				"Package Control: Upgrade Package"
			],
			[
				"Paca",
				"Package Control: Install Package"
			],
			[
				"Pacakge",
				"Package Control: Install Package"
			],
			[
				"pak",
				"Package Control: Upgrade Package"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"REINDE",
				"Indentation: Reindent Lines"
			],
			[
				"packag",
				"Package Control: Upgrade Package"
			],
			[
				"package ",
				"Package Control: Install Package"
			],
			[
				"pakca",
				"Package Control: Install Package"
			],
			[
				"Package In",
				"Package Control: Install Package"
			],
			[
				"Packaage",
				"Package Control: Install Package"
			],
			[
				"Pacake",
				"Package Control: Install Package"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print('Please restart Sublime Text to finish installation')"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/indices.html",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/operators.html",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_euler.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/install_udfs.sql",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/deinstall_udfs.sql",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/polygon.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/line.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_operators.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/ellipse.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_swap.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/circle.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/index.html",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/x44.html",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/types.html",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_circum.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/test/path.sql",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/doc/x18.html",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_polygon.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/expected/points.sql.out",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/expected/path.sql.out",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_point.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_circle.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_ellipse.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_line.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/expected/line.sql.out",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/expected/euler.sql.out",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_box.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_path.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/ellipse.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/test/circle_extended.sql",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/test/ellipse.sql",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/expected/ellipse.sql.out",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/setup/test_spherecircle.sql",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/setup/test_spherepoint.sql",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_npoints.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_helpers.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_length.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_dist.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_center.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_sstr.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_area.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/setup/test_spherebox.sql",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/setup/test_spherepath.sql",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/setup/test_spherepolygon.sql",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/test/circle.sql",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/output.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/expected/circle.sql.out",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/test/expected/box.sql.out",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/types.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/globals.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/CMakeLists.txt",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/output.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/box.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/box.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/path.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/path.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/serialiser.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/serialiser.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/point.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/polygon.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/util.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/euler.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/point.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sbuffer.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/serialiser_helper.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/box.ccpend",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/line.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/udf_sphere_line_tmp.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/circle.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/euler.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/.gitignore",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/vector3d.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/vector3d.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sbuffer.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sscan.l",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sscan.cc",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sparse.y",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sparse.h",
		"/home/adrpar/Documents/eScience/Tools/mysql_sphere/src/sparse.cc",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/views/scripts/tables/show.phtml",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/views/scripts/databases/show.phtml",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/views/scripts/columns/show.phtml",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/client/js/daiquiri_browser.js",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/library/Wordpress/plugin/daiquiri_shortcodes.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/controllers/DatabasesController.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/controllers/TablesController.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/query/models/Resource/PaquProcessor.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/client/css/daiquiri_table.css",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/models/Viewer.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/client/js/daiquiri_query.js",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/client/js/daiquiri_table.js",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/files/models/Files.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/client/css/daiquiri_common.css",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/models/Columns.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/library/paqu/src/parseSqlAll.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/controllers/ColumnsController.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/models/Resource/Columns.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/controllers/IndexController.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/library/Wordpress/plugin/daiquiri.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/models/Databases.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/models/Tables.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/library/Daiquiri/Auth.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/query/views/scripts/index/index.phtml",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/query/models/Resource/SimpleQueue.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/query/models/Examples.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/query/controllers/IndexController.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/library/Daiquiri/Acl.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/query/models/Init.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/query/models/Resource/Processing.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/query/views/scripts/_partials/sql-query.phtml",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/query/models/Resource/AbstractQueue.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/library/paqu/src/parallelQuery.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/library/paqu/src/queryPlanWriter.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/library/paqu/src/paraQuery.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/library/paqu/src/paraQueryFunc.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/query/models/Resource/MySQLProcessor.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/query/models/Resource/DirectProcessor.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/query/models/Resource/PaquQQueue.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/library/paqu/src/php-sql-creator2.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/library/paqu/src/parOptimImplicitJoin.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/forms/Column.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/forms/Table.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/library/Daiquiri/Form/Abstract.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/data/models/Resource/Description.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/modules/query/models/Form.php",
		"/home/adrpar/Documents/eScience/multidark2/daiquiri/client/js/daiquiri_query_buttons.js"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"*",
			"udf*",
			"*",
			"*.php",
			"*.js",
			"*.php",
			"*.*",
			"*.php",
			"",
			"*.php",
			"*.js",
			"*",
			"*.js",
			"*.php",
			"",
			"*",
			"*.php",
			"*",
			"*.php",
			"*",
			"*.php",
			"",
			"*.php",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"mysql-sphere",
			"pgSpher",
			"sql",
			"sbox_sw",
			"axes",
			"float8",
			"sql&#62;",
			"&#13;sql&#62;",
			"SELECT",
			">&#13;sql&#62; ",
			"&#13;sql&#62;",
			"strans_circle_inverse",
			"ellipse",
			"circle",
			"stransform",
			"STransform",
			"strans",
			"strams",
			"snotequal",
			"sql",
			"&#13;sql",
			"sql",
			"DEG",
			"pgSphere",
			"&#13;sql&#62",
			"sql",
			"DEG",
			"%\"\n",
			"Maria",
			"pgSphere",
			"http://pgsphere.projects.pgfoundry.org",
			"index_files",
			"fprintf",
			"fprintf(stderr, ",
			"fprintf (stderr, ",
			"fprintf (stderr",
			"radius must be not greater than 90 degrees",
			"SELECT sstr(scircle( '< (1h 2m 30s , +1d 2m 30s), 90d >'));",
			"1\n",
			"0\n",
			"SELECT spoly",
			"  );",
			"; )",
			"SELECT",
			"); ) \n",
			"; ) ",
			"---",
			"--",
			"-----",
			"----",
			"---",
			"--",
			"-----",
			"----",
			"---",
			"--",
			"15d",
			"sqeual",
			"1",
			"spoly_add_point_aggr",
			"spoly_aggr",
			" !~ ",
			" !&& ",
			" !@ ",
			" ~ ",
			" <> ",
			" = ",
			" && ",
			"::spoint",
			"spoint",
			")::spoint",
			"::spoint",
			" @ ",
			"@poly;",
			"@poly; ",
			" @ ",
			"::scircle",
			" @ ",
			">';",
			"sellipse '<{",
			">'  ",
			"}'  ",
			")}'   ",
			")}' && spoly",
			")}' ~ spoly",
			"}' @ spoly",
			"::scircle",
			")}' && '<(",
			")::scircle",
			")}' @ '<(",
			")}' ~ sp",
			")}' ~ '<(",
			"::scircle",
			" ~ '(",
			")}' <>",
			")}' =",
			")}' ",
			")}'",
			")}';",
			"}';",
			"spoly '{(",
			")'",
			"spoint()",
			"spoint '(",
			"scircle  '<",
			"spoint   '(",
			":poly",
			"1\n",
			"0\n",
			"spoint(",
			"<->spoint",
			"<->",
			"<>spoint",
			"=spoint",
			"lat",
			"long",
			"dist",
			" ;",
			" != ",
			" = ",
			",spo",
			" ,",
			"::spoint",
			"'( ",
			")'",
			"spoint '(",
			"0\n",
			"1\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": true,
		"regex": false,
		"replace_history":
		[
			"mysql_sphere",
			")')",
			"spoint('(",
			">')",
			"sellipse('<",
			"scircle",
			"spoint",
			"circle",
			"point",
			")' )",
			"))' )",
			">' )",
			"sbox ( ",
			"spoint ( ",
			") VALUES (",
			"(point)",
			"> \" ));",
			"INSERT INTO spherecircle (circle) VALUES (scircle(\" <(",
			"",
			"MYSQL_UDF_DEINIT_BUFFER()",
			"MYSQL_UDF_CHK_SPHERETYPE",
			"setSQL(array($shard_query))",
			"paqu",
			"&lt;",
			"&gt;",
			"&lt;",
			"&gt;",
			"&lt;",
			"processQueryWildcard",
			"thd",
			"\\\"",
			"Data_UCD",
			"_resolveQueues",
			"_resolveStatus",
			"_resolveUserName",
			"_createJobHistorySelect",
			"_createJobSelect",
			"_createJobTableUnion",
			"_replaceJobDBWithHistory",
			"_changeTableNames",
			"_dropTable",
			"_renameTable",
			"paquDropTmp",
			"paquExec"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 16,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "test/test/poly.sql",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31416,
						"regions":
						{
						},
						"selection":
						[
							[
								4333,
								4333
							],
							[
								4391,
								4391
							],
							[
								4448,
								4448
							]
						],
						"settings":
						{
							"syntax": "Packages/SQL/SQL.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 644.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "test/expected/poly.sql.out",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26198,
						"regions":
						{
						},
						"selection":
						[
							[
								25476,
								25476
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 8184.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 87561,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										242,
										301
									],
									[
										431,
										490
									],
									[
										620,
										679
									],
									[
										809,
										868
									],
									[
										1152,
										1194
									],
									[
										1386,
										1428
									],
									[
										1662,
										1677
									],
									[
										1870,
										1885
									],
									[
										2068,
										2083
									],
									[
										2284,
										2299
									],
									[
										2478,
										2493
									],
									[
										2715,
										2730
									],
									[
										2844,
										2859
									],
									[
										2968,
										2983
									],
									[
										3053,
										3068
									],
									[
										3098,
										3113
									],
									[
										3226,
										3241
									],
									[
										3432,
										3447
									],
									[
										3627,
										3642
									],
									[
										3861,
										3878
									],
									[
										4069,
										4086
									],
									[
										4294,
										4311
									],
									[
										4423,
										4440
									],
									[
										4547,
										4564
									],
									[
										4632,
										4649
									],
									[
										4677,
										4694
									],
									[
										4805,
										4822
									],
									[
										5011,
										5028
									],
									[
										5206,
										5223
									],
									[
										5440,
										5457
									],
									[
										5648,
										5665
									],
									[
										5873,
										5890
									],
									[
										6002,
										6019
									],
									[
										6126,
										6143
									],
									[
										6211,
										6228
									],
									[
										6256,
										6273
									],
									[
										6384,
										6401
									],
									[
										6590,
										6607
									],
									[
										6785,
										6802
									],
									[
										7026,
										7042
									],
									[
										7100,
										7116
									],
									[
										7366,
										7382
									],
									[
										7514,
										7530
									],
									[
										7692,
										7708
									],
									[
										7895,
										7911
									],
									[
										8043,
										8059
									],
									[
										8221,
										8237
									],
									[
										8387,
										8403
									],
									[
										8570,
										8586
									],
									[
										8888,
										8904
									],
									[
										9046,
										9062
									],
									[
										9236,
										9252
									],
									[
										9530,
										9537
									],
									[
										9731,
										9738
									],
									[
										9939,
										9946
									],
									[
										10109,
										10116
									],
									[
										10341,
										10348
									],
									[
										10603,
										10610
									],
									[
										10857,
										10864
									],
									[
										11005,
										11012
									],
									[
										11197,
										11204
									],
									[
										11338,
										11345
									],
									[
										11518,
										11525
									],
									[
										11741,
										11748
									],
									[
										11908,
										11915
									],
									[
										12124,
										12131
									],
									[
										12318,
										12325
									],
									[
										12549,
										12556
									],
									[
										12717,
										12724
									],
									[
										12947,
										12954
									],
									[
										13115,
										13122
									],
									[
										13291,
										13298
									],
									[
										13497,
										13504
									],
									[
										13697,
										13704
									],
									[
										13771,
										13778
									],
									[
										13931,
										13938
									],
									[
										14164,
										14171
									],
									[
										14332,
										14339
									],
									[
										14575,
										14582
									],
									[
										14784,
										14791
									],
									[
										15070,
										15077
									],
									[
										15218,
										15225
									],
									[
										15396,
										15403
									],
									[
										15599,
										15606
									],
									[
										15747,
										15754
									],
									[
										15925,
										15932
									],
									[
										16091,
										16098
									],
									[
										16274,
										16281
									],
									[
										16592,
										16599
									],
									[
										16750,
										16757
									],
									[
										16940,
										16947
									],
									[
										17211,
										17218
									],
									[
										17401,
										17408
									],
									[
										17491,
										17498
									],
									[
										17499,
										17506
									],
									[
										17596,
										17603
									],
									[
										17728,
										17735
									],
									[
										17857,
										17864
									],
									[
										18002,
										18009
									],
									[
										18080,
										18087
									],
									[
										18211,
										18218
									],
									[
										18293,
										18300
									],
									[
										18378,
										18385
									],
									[
										18423,
										18430
									],
									[
										18551,
										18558
									],
									[
										18757,
										18764
									],
									[
										18952,
										18959
									],
									[
										19147,
										19154
									],
									[
										19405,
										19412
									],
									[
										19606,
										19613
									],
									[
										19814,
										19821
									],
									[
										19984,
										19991
									],
									[
										20216,
										20223
									],
									[
										20478,
										20485
									],
									[
										20732,
										20739
									],
									[
										20880,
										20887
									],
									[
										21072,
										21079
									],
									[
										21213,
										21220
									],
									[
										21393,
										21400
									],
									[
										21616,
										21623
									],
									[
										21783,
										21790
									],
									[
										21999,
										22006
									],
									[
										22193,
										22200
									],
									[
										22424,
										22431
									],
									[
										22592,
										22599
									],
									[
										22822,
										22829
									],
									[
										22990,
										22997
									],
									[
										23166,
										23173
									],
									[
										23372,
										23379
									],
									[
										23572,
										23579
									],
									[
										23646,
										23653
									],
									[
										23806,
										23813
									],
									[
										24039,
										24046
									],
									[
										24207,
										24214
									],
									[
										24450,
										24457
									],
									[
										24659,
										24666
									],
									[
										24945,
										24952
									],
									[
										25093,
										25100
									],
									[
										25271,
										25278
									],
									[
										25474,
										25481
									],
									[
										25622,
										25629
									],
									[
										25800,
										25807
									],
									[
										25966,
										25973
									],
									[
										26149,
										26156
									],
									[
										26467,
										26474
									],
									[
										26625,
										26632
									],
									[
										26815,
										26822
									],
									[
										27086,
										27093
									],
									[
										27276,
										27283
									],
									[
										27366,
										27373
									],
									[
										27374,
										27381
									],
									[
										27471,
										27478
									],
									[
										27603,
										27610
									],
									[
										27732,
										27739
									],
									[
										27877,
										27884
									],
									[
										27955,
										27962
									],
									[
										28086,
										28093
									],
									[
										28168,
										28175
									],
									[
										28253,
										28260
									],
									[
										28298,
										28305
									],
									[
										28426,
										28433
									],
									[
										28632,
										28639
									],
									[
										28827,
										28834
									],
									[
										29022,
										29029
									],
									[
										29280,
										29287
									],
									[
										29481,
										29488
									],
									[
										29689,
										29696
									],
									[
										29859,
										29866
									],
									[
										30091,
										30098
									],
									[
										30353,
										30360
									],
									[
										30620,
										30627
									],
									[
										30768,
										30775
									],
									[
										30960,
										30967
									],
									[
										31101,
										31108
									],
									[
										31281,
										31288
									],
									[
										31504,
										31511
									],
									[
										31671,
										31678
									],
									[
										31887,
										31894
									],
									[
										32081,
										32088
									],
									[
										32312,
										32319
									],
									[
										32480,
										32487
									],
									[
										32710,
										32717
									],
									[
										32878,
										32885
									],
									[
										33054,
										33061
									],
									[
										33260,
										33267
									],
									[
										33460,
										33467
									],
									[
										33534,
										33541
									],
									[
										33694,
										33701
									],
									[
										33927,
										33934
									],
									[
										34095,
										34102
									],
									[
										34338,
										34345
									],
									[
										34547,
										34554
									],
									[
										34833,
										34840
									],
									[
										34981,
										34988
									],
									[
										35159,
										35166
									],
									[
										35362,
										35369
									],
									[
										35510,
										35517
									],
									[
										35688,
										35695
									],
									[
										35854,
										35861
									],
									[
										36037,
										36044
									],
									[
										36355,
										36362
									],
									[
										36513,
										36520
									],
									[
										36703,
										36710
									],
									[
										36974,
										36981
									],
									[
										37164,
										37171
									],
									[
										37254,
										37261
									],
									[
										37262,
										37269
									],
									[
										37359,
										37366
									],
									[
										37491,
										37498
									],
									[
										37620,
										37627
									],
									[
										37765,
										37772
									],
									[
										37843,
										37850
									],
									[
										37974,
										37981
									],
									[
										38056,
										38063
									],
									[
										38141,
										38148
									],
									[
										38186,
										38193
									],
									[
										38314,
										38321
									],
									[
										38520,
										38527
									],
									[
										38715,
										38722
									],
									[
										38910,
										38917
									],
									[
										39168,
										39175
									],
									[
										39369,
										39376
									],
									[
										39577,
										39584
									],
									[
										39747,
										39754
									],
									[
										39979,
										39986
									],
									[
										40241,
										40248
									],
									[
										40508,
										40515
									],
									[
										40656,
										40663
									],
									[
										40848,
										40855
									],
									[
										40989,
										40996
									],
									[
										41169,
										41176
									],
									[
										41392,
										41399
									],
									[
										41559,
										41566
									],
									[
										41775,
										41782
									],
									[
										41969,
										41976
									],
									[
										42200,
										42207
									],
									[
										42368,
										42375
									],
									[
										42598,
										42605
									],
									[
										42766,
										42773
									],
									[
										42942,
										42949
									],
									[
										43148,
										43155
									],
									[
										43348,
										43355
									],
									[
										43422,
										43429
									],
									[
										43582,
										43589
									],
									[
										43815,
										43822
									],
									[
										43983,
										43990
									],
									[
										44226,
										44233
									],
									[
										44435,
										44442
									],
									[
										44721,
										44728
									],
									[
										44869,
										44876
									],
									[
										45047,
										45054
									],
									[
										45250,
										45257
									],
									[
										45398,
										45405
									],
									[
										45576,
										45583
									],
									[
										45742,
										45749
									],
									[
										45925,
										45932
									],
									[
										46243,
										46250
									],
									[
										46401,
										46408
									],
									[
										46591,
										46598
									],
									[
										46862,
										46869
									],
									[
										47052,
										47059
									],
									[
										47142,
										47149
									],
									[
										47150,
										47157
									],
									[
										47247,
										47254
									],
									[
										47379,
										47386
									],
									[
										47508,
										47515
									],
									[
										47653,
										47660
									],
									[
										47731,
										47738
									],
									[
										47862,
										47869
									],
									[
										47944,
										47951
									],
									[
										48029,
										48036
									],
									[
										48074,
										48081
									],
									[
										48202,
										48209
									],
									[
										48408,
										48415
									],
									[
										48603,
										48610
									],
									[
										48798,
										48805
									],
									[
										49113,
										49125
									],
									[
										49448,
										49460
									],
									[
										49616,
										49628
									],
									[
										49758,
										49770
									],
									[
										49916,
										49928
									],
									[
										49980,
										49992
									],
									[
										50259,
										50271
									],
									[
										50491,
										50503
									],
									[
										50677,
										50689
									],
									[
										50821,
										50833
									],
									[
										50957,
										50969
									],
									[
										51110,
										51122
									],
									[
										51263,
										51275
									],
									[
										51416,
										51428
									],
									[
										51569,
										51581
									],
									[
										51776,
										51788
									],
									[
										51918,
										51930
									],
									[
										52106,
										52118
									],
									[
										52248,
										52260
									],
									[
										52462,
										52474
									],
									[
										52840,
										52852
									],
									[
										52979,
										52991
									],
									[
										53165,
										53177
									],
									[
										53316,
										53328
									],
									[
										53666,
										53678
									],
									[
										54035,
										54047
									],
									[
										54470,
										54482
									],
									[
										55080,
										55092
									],
									[
										59402,
										59414
									],
									[
										59584,
										59596
									],
									[
										59726,
										59738
									],
									[
										59870,
										59882
									],
									[
										59976,
										59988
									],
									[
										60367,
										60379
									],
									[
										60509,
										60521
									],
									[
										60653,
										60665
									],
									[
										60955,
										60967
									],
									[
										61170,
										61182
									],
									[
										61303,
										61315
									],
									[
										61458,
										61470
									],
									[
										61588,
										61600
									],
									[
										61742,
										61754
									],
									[
										61949,
										61961
									],
									[
										62171,
										62183
									],
									[
										62346,
										62358
									],
									[
										62514,
										62526
									],
									[
										62723,
										62735
									],
									[
										62865,
										62877
									],
									[
										63009,
										63021
									],
									[
										63271,
										63283
									],
									[
										63424,
										63436
									],
									[
										63670,
										63682
									],
									[
										63822,
										63834
									],
									[
										64045,
										64057
									],
									[
										64237,
										64249
									],
									[
										64396,
										64408
									],
									[
										64540,
										64552
									],
									[
										64794,
										64806
									],
									[
										64903,
										64915
									],
									[
										65046,
										65058
									],
									[
										65188,
										65200
									],
									[
										65312,
										65324
									],
									[
										65419,
										65431
									],
									[
										65595,
										65607
									],
									[
										65759,
										65771
									],
									[
										65941,
										65953
									],
									[
										66133,
										66145
									],
									[
										66284,
										66296
									],
									[
										66399,
										66411
									],
									[
										66537,
										66549
									],
									[
										66716,
										66728
									],
									[
										66819,
										66831
									],
									[
										66924,
										66936
									],
									[
										67042,
										67054
									],
									[
										67196,
										67208
									],
									[
										67300,
										67312
									],
									[
										67408,
										67420
									],
									[
										67699,
										67711
									],
									[
										67819,
										67831
									],
									[
										68123,
										68135
									],
									[
										68252,
										68264
									],
									[
										68313,
										68325
									],
									[
										68614,
										68626
									],
									[
										68782,
										68794
									],
									[
										68924,
										68936
									],
									[
										69082,
										69094
									],
									[
										69146,
										69158
									],
									[
										69425,
										69437
									],
									[
										69657,
										69669
									],
									[
										69843,
										69855
									],
									[
										69987,
										69999
									],
									[
										70123,
										70135
									],
									[
										70276,
										70288
									],
									[
										70429,
										70441
									],
									[
										70582,
										70594
									],
									[
										70735,
										70747
									],
									[
										70942,
										70954
									],
									[
										71084,
										71096
									],
									[
										71272,
										71284
									],
									[
										71414,
										71426
									],
									[
										71628,
										71640
									],
									[
										72006,
										72018
									],
									[
										72145,
										72157
									],
									[
										72331,
										72343
									],
									[
										72482,
										72494
									],
									[
										72832,
										72844
									],
									[
										73201,
										73213
									],
									[
										73636,
										73648
									],
									[
										74246,
										74258
									],
									[
										78568,
										78580
									],
									[
										78750,
										78762
									],
									[
										78892,
										78904
									],
									[
										79036,
										79048
									],
									[
										79142,
										79154
									],
									[
										79533,
										79545
									],
									[
										79675,
										79687
									],
									[
										79819,
										79831
									],
									[
										80121,
										80133
									],
									[
										80336,
										80348
									],
									[
										80469,
										80481
									],
									[
										80624,
										80636
									],
									[
										80754,
										80766
									],
									[
										80908,
										80920
									],
									[
										81115,
										81127
									],
									[
										81337,
										81349
									],
									[
										81512,
										81524
									],
									[
										81680,
										81692
									],
									[
										81889,
										81901
									],
									[
										82031,
										82043
									],
									[
										82175,
										82187
									],
									[
										82437,
										82449
									],
									[
										82590,
										82602
									],
									[
										82836,
										82848
									],
									[
										82988,
										83000
									],
									[
										83211,
										83223
									],
									[
										83403,
										83415
									],
									[
										83562,
										83574
									],
									[
										83706,
										83718
									],
									[
										83960,
										83972
									],
									[
										84069,
										84081
									],
									[
										84212,
										84224
									],
									[
										84354,
										84366
									],
									[
										84478,
										84490
									],
									[
										84585,
										84597
									],
									[
										84761,
										84773
									],
									[
										84925,
										84937
									],
									[
										85107,
										85119
									],
									[
										85299,
										85311
									],
									[
										85450,
										85462
									],
									[
										85565,
										85577
									],
									[
										85703,
										85715
									],
									[
										85882,
										85894
									],
									[
										85985,
										85997
									],
									[
										86090,
										86102
									],
									[
										86208,
										86220
									],
									[
										86362,
										86374
									],
									[
										86466,
										86478
									],
									[
										86574,
										86586
									],
									[
										86865,
										86877
									],
									[
										86985,
										86997
									],
									[
										87289,
										87301
									],
									[
										87418,
										87430
									],
									[
										87479,
										87491
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								68397,
								68397
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 12,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 40352.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/serialiser.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10427,
						"regions":
						{
						},
						"selection":
						[
							[
								5889,
								5889
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2716.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "install_udfs.sql",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22979,
						"regions":
						{
						},
						"selection":
						[
							[
								4249,
								4249
							]
						],
						"settings":
						{
							"syntax": "Packages/SQL/SQL.tmLanguage"
						},
						"translation.x": -0.0,
						"translation.y": 621.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "doc/funcs.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22270,
						"regions":
						{
						},
						"selection":
						[
							[
								623,
								623
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/HTML (Django).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "doc/examples.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5817,
						"regions":
						{
						},
						"selection":
						[
							[
								612,
								612
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/HTML (Django).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "doc/construct.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23778,
						"regions":
						{
						},
						"selection":
						[
							[
								625,
								625
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/HTML (Django).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "doc/appendixes.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2166,
						"regions":
						{
						},
						"selection":
						[
							[
								505,
								505
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/HTML (Django).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "README",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1656,
						"regions":
						{
						},
						"selection":
						[
							[
								104,
								104
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "doc/x18.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4200,
						"regions":
						{
						},
						"selection":
						[
							[
								659,
								659
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/HTML (Django).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "doc/x44.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6153,
						"regions":
						{
						},
						"selection":
						[
							[
								631,
								631
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/HTML (Django).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "doc/x1240.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1992,
						"regions":
						{
						},
						"selection":
						[
							[
								587,
								587
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/HTML (Django).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "doc/types.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29091,
						"regions":
						{
						},
						"selection":
						[
							[
								626,
								626
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/HTML (Django).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "doc/operators.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22357,
						"regions":
						{
						},
						"selection":
						[
							[
								624,
								624
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/HTML (Django).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "doc/indices.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2420,
						"regions":
						{
						},
						"selection":
						[
							[
								619,
								619
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/HTML (Django).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "doc/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6460,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/HTML (Django).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/udf_sphere_box.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 67857,
						"regions":
						{
						},
						"selection":
						[
							[
								6896,
								6896
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2997.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.clang":
	{
		"height": 119.0
	},
	"output.exec":
	{
		"height": 203.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "mysql_sphere.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"abstrac",
				"library/Daiquiri/Model/DbTable/Abstract.php"
			],
			[
				"abst",
				"library/Daiquiri/Model/DbTable/Abstract.php"
			],
			[
				"viewer",
				"modules/data/models/Resource/Viewer.php"
			],
			[
				"column",
				"daiquiri/modules/data/models/Resource/Columns.php"
			],
			[
				"columns",
				"multidark2/daiquiri/modules/data/controllers/ColumnsController.php"
			],
			[
				"acl",
				"daiquiri/library/Daiquiri/Acl.php"
			],
			[
				"init",
				"multidark2/daiquiri/modules/auth/models/Init.php"
			],
			[
				"php-sql-creator2",
				"daiquiri/library/paqu/src/php-sql-creator2.php"
			],
			[
				"dbtaabstract",
				"multidark2/daiquiri/library/Daiquiri/Model/DbTable/Abstract.php"
			],
			[
				"table",
				"multidark2/daiquiri/library/Daiquiri/Model/Resource/Table.php"
			],
			[
				"proces",
				"daiquiri/modules/query/models/Resource/Processing.php"
			],
			[
				"jobs",
				"multidark2/daiquiri/modules/query/models/Jobs.php"
			],
			[
				"parsesq",
				"daiquiri/library/paqu/src/parseSqlAll.php"
			],
			[
				"user.",
				"daiquiri/modules/auth/models/Resource/User.php"
			],
			[
				"database",
				"daiquiri/modules/query/models/Database.php"
			],
			[
				"databases",
				"daiquiri/modules/data/models/Databases.php"
			],
			[
				"init.mus",
				"multidark2/init.musca.php"
			],
			[
				"init.php",
				"daiquiri/library/Daiquiri/Init.php"
			],
			[
				"votable",
				"daiquiri/modules/query/scripts/download/adapter/votable-binary2_stream.sh"
			],
			[
				"dai",
				"daiquiri/client/js/daiquiri_table.js"
			],
			[
				"abstract",
				"daiquiri/library/Daiquiri/Controller/Abstract.php"
			],
			[
				"logincon",
				"multidark2/daiquiri/modules/auth/controllers/LoginController.php"
			],
			[
				"loginc",
				"daiquiri/modules/auth/controllers/LoginController.php"
			],
			[
				"pagin",
				"daiquiri/library/Daiquiri/Model/PaginatedTable.php"
			],
			[
				"paginate",
				"daiquiri/library/Daiquiri/Model/PaginatedTable.php"
			],
			[
				"a",
				"daiquiri/library/Daiquiri/Auth.php"
			],
			[
				"rest",
				"daiquiri/library/Daiquiri/Controller/Plugin/Rest.php"
			],
			[
				"abstractr",
				"daiquiri/library/Daiquiri/Controller/AbstractREST.php"
			],
			[
				"auth",
				"daiquiri/library/Daiquiri/Auth.php"
			],
			[
				"login",
				"daiquiri/modules/auth/models/Login.php"
			],
			[
				"init.mu",
				"multidark2/init.musca.php"
			],
			[
				"init.m",
				"multidark2/init.musca.php"
			],
			[
				"ini.mu",
				"multidark2/init.musca.php"
			],
			[
				"init.musc",
				"multidark2/init.musca.php"
			],
			[
				"ini.mus",
				"multidark2/init.musca.php"
			],
			[
				"runmode.js",
				"daiquiri/client/lib/codemirror/addon/runmode/runmode.js"
			],
			[
				"entrie",
				"daiquiri/modules/config/models/Entries.php"
			],
			[
				"textare",
				"daiquiri/library/Daiquiri/Form/Validator/Textarea.php"
			],
			[
				"key",
				"daiquiri/library/Daiquiri/Model/Resource/KeyValue.php"
			],
			[
				"index.php",
				"multidark2/public/index.php"
			],
			[
				"abstrat",
				"daiquiri/library/Daiquiri/Model/Resource/Abstract.php"
			],
			[
				"boot",
				"daiquiri/library/Daiquiri/Bootstrap.php"
			],
			[
				"form",
				"daiquiri/modules/query/models/Form.php"
			],
			[
				"query.js",
				"daiquiri/client/js/daiquiri_query.js"
			],
			[
				"sys",
				"daiquiri/incubator/mysql_query_queue/src/sys_tbl.cc"
			],
			[
				"daem",
				"daiquiri/incubator/mysql_query_queue/src/daemon_thd.cc"
			],
			[
				"qque",
				"daiquiri/incubator/mysql_query_queue/src/query_queue.cc"
			],
			[
				"daiquiri_quer",
				"daiquiri/client/js/daiquiri_query.js"
			],
			[
				"position",
				"daiquiri/library/PHP-SQL-Parser/classes/position-calculator.php"
			],
			[
				"viewe",
				"daiquiri/modules/data/models/Resource/Viewer.php"
			],
			[
				"mysqldump",
				"daiquiri/incubator/mysqldump-vo/src/mysqldump.c"
			],
			[
				"data",
				"daiquiri/modules/query/models/Database.php"
			],
			[
				"abstractq",
				"daiquiri/modules/query/models/Resource/AbstractQueue.php"
			],
			[
				"qq",
				"daiquiri/modules/query/models/Resource/PaquQQueue.php"
			],
			[
				"daemon",
				"daiquiri/incubator/mysql_query_queue/src/daemon_thd.cc"
			],
			[
				"desc",
				"daiquiri/modules/data/models/Resource/Description.php"
			],
			[
				"pa",
				"daiquiri/modules/query/models/Resource/PaquQQueue.php"
			],
			[
				"paq",
				"daiquiri/modules/query/models/Resource/PaquQQueue.php"
			],
			[
				"descrip",
				"daiquiri/modules/data/models/Resource/Description.php"
			],
			[
				"style.css",
				"multidark2/public/css/style.css"
			],
			[
				"paquqq",
				"daiquiri/modules/query/models/Resource/PaquQQueue.php"
			],
			[
				"indexcont",
				"daiquiri/modules/query/controllers/IndexController.php"
			],
			[
				"csv.sh",
				"daiquiri/modules/query/scripts/download/adapter/csv.sh"
			],
			[
				"abstractform",
				"daiquiri/modules/query/forms/AbstractFormQuery.php"
			],
			[
				"zipstream",
				"daiquiri/library/PHPZip/ZipStream.php"
			],
			[
				"config",
				"daiquiri/library/Daiquiri/Config.php"
			],
			[
				"tables.php",
				"daiquiri/modules/data/models/Tables.php"
			],
			[
				"tables",
				"daiquiri/modules/data/models/Resource/Tables.php"
			],
			[
				"permission",
				"daiquiri/modules/query/models/Resource/Permissions.php"
			],
			[
				"ini.musc",
				"multidark2/init.musca.php"
			],
			[
				"dumptabl",
				"daiquiri/modules/query/scripts/download/worker/dumpTableJob.php"
			],
			[
				"qqueue_queue.",
				"daiquiri/incubator/mysql_query_queue/src/query_queue.cc"
			],
			[
				"init.coma",
				"multidark2/init.coma.php"
			],
			[
				"description",
				"daiquiri/modules/data/models/Resource/Description.php"
			],
			[
				"simple",
				"daiquiri/library/Daiquiri/Model/DbTable/Simple.php"
			],
			[
				"permiss",
				"daiquiri/modules/query/models/Resource/Permissions.php"
			],
			[
				"init.com",
				"multidark2/init.coma.php"
			],
			[
				"init.",
				"multidark2/init.coma.php"
			],
			[
				"acl.php",
				"daiquiri/library/Daiquiri/Acl.php"
			],
			[
				"permis",
				"daiquiri/modules/query/models/Resource/Permissions.php"
			],
			[
				"mysq",
				"daiquiri/modules/query/models/Resource/MySQLProcessor.php"
			],
			[
				"proc",
				"daiquiri/modules/query/models/Resource/Processing.php"
			],
			[
				"user",
				"daiquiri/modules/auth/models/User.php"
			],
			[
				"abstr",
				"daiquiri/library/Daiquiri/Controller/Abstract.php"
			],
			[
				"indexcon",
				"daiquiri/modules/query/controllers/IndexController.php"
			],
			[
				"indexc",
				"daiquiri/modules/query/controllers/IndexController.php"
			],
			[
				"quer",
				"daiquiri/client/js/daiquiri_query.js"
			],
			[
				"appli",
				"application/configs/application.musca.ini"
			],
			[
				"php-sql",
				"daiquiri/library/PHP-SQL-Parser/php-sql-creator.php"
			],
			[
				"applic",
				"application/configs/application.ini"
			],
			[
				"process",
				"daiquiri/modules/query/models/Processing.php"
			],
			[
				"js",
				"daiquiri/client/js/daiquiri_query.js"
			],
			[
				"confi",
				"daiquiri/library/Daiquiri/Config.php"
			],
			[
				"sim",
				"daiquiri/modules/query/models/Resource/Simple.php"
			],
			[
				"simpl",
				"daiquiri/modules/query/models/Resource/Simple.php"
			],
			[
				"current",
				"daiquiri/modules/query/models/CurrentJobs.php"
			],
			[
				"absta",
				"daiquiri/library/Daiquiri/Form/Abstract.php"
			],
			[
				".sql",
				"daiquiri/incubator/mysql_query_queue/install_qqueue.sql"
			],
			[
				"install_",
				"daiquiri/incubator/spiderQueryPlanner/mysql_udf/install_udfs.sql"
			],
			[
				"query_qu",
				"daiquiri/incubator/mysql_query_queue/src/query_queue.cc"
			],
			[
				"php-",
				"daiquiri/library/PHP-SQL-Parser/php-sql-creator.php"
			],
			[
				"abstra",
				"daiquiri/library/Daiquiri/Form/Abstract.php"
			],
			[
				"udf_val",
				"daiquiri/incubator/spiderQueryPlanner/mysql_validateSQL/src/udf_validate_sql.cc"
			],
			[
				"php-sql-cre",
				"daiquiri/externals/php-sql-parser/php-sql-creator.php"
			],
			[
				"php",
				"daiquiri/externals/php-sql-parser/php-sql-parser.php"
			],
			[
				"tables.",
				"daiquiri/modules/query/models/Tables.php"
			],
			[
				"plain",
				"daiquiri/modules/query/models/Resource/Plain.php"
			],
			[
				"tablesco",
				"daiquiri/modules/query/controllers/TablesController.php"
			],
			[
				"plain.php",
				"daiquiri/modules/query/models/Resource/Plain.php"
			],
			[
				"index",
				"application/controllers/IndexController.php"
			],
			[
				"paginated",
				"daiquiri/library/Daiquiri/Model/PaginatedTable.php"
			],
			[
				"",
				"daiquiri/library/Daiquiri/Model/Resource/Table.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 261.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
